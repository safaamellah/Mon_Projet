{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { listGroupTheme } from './theme.js';\nconst ListGroupItem = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([listGroupTheme.item, provider.theme?.listGroup?.item, props.theme], [get(provider.clearTheme, \"listGroup.item\"), props.clearTheme], [get(provider.applyTheme, \"listGroup.item\"), props.applyTheme]);\n  const {\n    active: isActive,\n    children,\n    className,\n    href,\n    icon: Icon,\n    onClick,\n    disabled,\n    ...restProps\n  } = resolveProps(props, provider.props?.listGroupItem);\n  const isLink = typeof href !== \"undefined\";\n  const Component = isLink ? \"a\" : \"button\";\n  return /* @__PURE__ */jsx(\"li\", {\n    ref,\n    className: twMerge(theme.base, className),\n    children: /* @__PURE__ */jsxs(Component, {\n      href,\n      onClick,\n      type: isLink ? void 0 : \"button\",\n      disabled,\n      className: twMerge(theme.link.active[isActive ? \"on\" : \"off\"], theme.link.disabled[disabled ? \"on\" : \"off\"], theme.link.base, theme.link.href[isLink ? \"on\" : \"off\"]),\n      ...restProps,\n      children: [Icon && /* @__PURE__ */jsx(Icon, {\n        \"aria-hidden\": true,\n        \"data-testid\": \"flowbite-list-group-item-icon\",\n        className: theme.link.icon\n      }), children]\n    })\n  });\n});\nListGroupItem.displayName = \"ListGroupItem\";\nexport { ListGroupItem };","map":{"version":3,"names":["ListGroupItem","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","listGroupTheme","item","listGroup","get","clearTheme","applyTheme","active","isActive","children","className","href","icon","Icon","onClick","disabled","restProps","resolveProps","listGroupItem","isLink","Component","jsx","twMerge","base","jsxs","type","link"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\ListGroup\\ListGroupItem.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type FC } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport { listGroupTheme } from \"./theme\";\n\nexport interface ListGroupItemTheme {\n  base: string;\n  link: {\n    base: string;\n    active: FlowbiteBoolean;\n    disabled: FlowbiteBoolean;\n    href: FlowbiteBoolean;\n    icon: string;\n  };\n}\n\ntype GenericLinkButtonProps = ComponentProps<\"a\"> & ComponentProps<\"button\">;\n\nexport interface ListGroupItemProps extends GenericLinkButtonProps, ThemingProps<ListGroupItemTheme> {\n  active?: boolean;\n  icon?: FC<ComponentProps<\"svg\">>;\n}\n\nexport const ListGroupItem = forwardRef<HTMLLIElement, ListGroupItemProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [listGroupTheme.item, provider.theme?.listGroup?.item, props.theme],\n    [get(provider.clearTheme, \"listGroup.item\"), props.clearTheme],\n    [get(provider.applyTheme, \"listGroup.item\"), props.applyTheme],\n  );\n\n  const {\n    active: isActive,\n    children,\n    className,\n    href,\n    icon: Icon,\n    onClick,\n    disabled,\n    ...restProps\n  } = resolveProps(props, provider.props?.listGroupItem);\n\n  const isLink = typeof href !== \"undefined\";\n  const Component = isLink ? \"a\" : \"button\";\n\n  return (\n    <li ref={ref} className={twMerge(theme.base, className)}>\n      <Component\n        href={href}\n        onClick={onClick}\n        type={isLink ? undefined : \"button\"}\n        disabled={disabled}\n        className={twMerge(\n          theme.link.active[isActive ? \"on\" : \"off\"],\n          theme.link.disabled[disabled ? \"on\" : \"off\"],\n          theme.link.base,\n          theme.link.href[isLink ? \"on\" : \"off\"],\n        )}\n        {...restProps}\n      >\n        {Icon && <Icon aria-hidden data-testid=\"flowbite-list-group-item-icon\" className={theme.link.icon} />}\n        {children}\n      </Component>\n    </li>\n  );\n});\n\nListGroupItem.displayName = \"ListGroupItem\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,aAAiB,GAAAC,UAAA,EAAAC,KAAkB,EAAAC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAqB,CACtB,CAACC,cAAa,CAAAC,IAAA,EAAAL,QAAY,CAAAE,KAAA,EAAAI,SAAmB,EAAAD,IAAM,EAAAP,KAAA,CAAUI,KAAC,GAC9D,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,gBAAgB,CAAC,EAAEV,KAAK,CAACU,UAAU,GAC9D,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,qBAAAX,KAAA,CAAAW,UAAA,CACD;EACF,MAAI;IACAC,MAAA,EAAQC,QAAA;IACRC,QAAA;IACAC,SAAI;IACJC,IAAI;IACJC,IAAA,EAAAC,IAAO;IACPC,OAAA;IACAC,QAAG;IACJ,GAAGC;EACJ,IAAAC,YAAe,CAAAtB,KAAO,EAAAE,QAAS,CAAAF,KAAA,EAAAuB,aAAW;EAC1C,MAAMC,MAAA,GAAS,OAAGR,IAAM,KAAM,WAAW;EACzC,MAAAS,SAAA,GAAAD,MAAuB,GAAI,MAAM,QAAO;EAC1C,OAAI,eAASE,GAAA;IAAAzB,GAAA;IAAAc,SAAA,EAAAY,OAAA,CAAAvB,KAAA,CAAAwB,IAAA,EAAAb,SAAA;IAAAD,QAAA,iBAAAe,IAAA,CACTJ,SAAA,EACJ;MACMT,IAAA;MACAG,OAAM;MACNW,IAAA,EAAAN,MAAQ;MACRJ,QAAA;MACNL,SAAc,EAAAY,OAAK,CACXvB,KAAK,CAAC2B,IAAI,CAACnB,MAAA,CAAAC,QAAS,GAAQ,IAAG,GAAI,KAAG,GACtCT,KAAK,CAAC2B,IAAI,CAACX,QAAI,CAAAA,QAAA,kBACfhB,KAAK,CAAC2B,IAAI,CAACH,IAAI,EAChBxB,KAAA,CAAA2B,IAAA,CAAAf,IAAA,CAAAQ,MAAA,gBACD;MACA,GAAAH,SAAU;MAChBP,QAAY,GACJI,IAAA,mBAAAQ,GAAA,CAAAR,IAAA;QAAA;QAAA;QAAAH,SAAA,EAAAX,KAAA,CAAA2B,IAAA,CAAAd;MAAA,IACRH,QAAA;IAEG,CACF;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}