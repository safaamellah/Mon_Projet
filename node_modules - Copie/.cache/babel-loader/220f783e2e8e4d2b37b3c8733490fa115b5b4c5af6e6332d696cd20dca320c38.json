{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { RatingContext } from './RatingContext.js';\nimport { ratingTheme } from './theme.js';\nconst Rating = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([ratingTheme, provider.theme?.rating, props.theme], [get(provider.clearTheme, \"rating\"), props.clearTheme], [get(provider.applyTheme, \"rating\"), props.applyTheme]);\n  const {\n    className,\n    size = \"sm\",\n    ...restProps\n  } = resolveProps(props, provider.props?.rating);\n  return /* @__PURE__ */jsx(RatingContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme,\n      size\n    },\n    children: /* @__PURE__ */jsx(\"div\", {\n      ref,\n      className: twMerge(theme.root.base, className),\n      ...restProps\n    })\n  });\n});\nRating.displayName = \"Rating\";\nexport { Rating };","map":{"version":3,"names":["Rating","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","ratingTheme","rating","get","clearTheme","applyTheme","className","size","restProps","resolveProps","jsx","RatingContext","Provider","value","children","twMerge","root","base"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Rating\\Rating.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, ThemingProps } from \"../../types\";\nimport { RatingContext } from \"./RatingContext\";\nimport type { RatingStarSizes, RatingStarTheme } from \"./RatingStar\";\nimport { ratingTheme } from \"./theme\";\n\nexport interface RatingTheme {\n  root: {\n    base: string;\n  };\n  star: RatingStarTheme;\n}\n\nexport interface RatingProps extends ComponentProps<\"div\">, ThemingProps<RatingTheme> {\n  size?: DynamicStringEnumKeysOf<RatingStarSizes>;\n}\n\nexport const Rating = forwardRef<HTMLDivElement, RatingProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [ratingTheme, provider.theme?.rating, props.theme],\n    [get(provider.clearTheme, \"rating\"), props.clearTheme],\n    [get(provider.applyTheme, \"rating\"), props.applyTheme],\n  );\n\n  const { className, size = \"sm\", ...restProps } = resolveProps(props, provider.props?.rating);\n\n  return (\n    <RatingContext.Provider\n      value={{ theme: props.theme, clearTheme: props.clearTheme, applyTheme: props.applyTheme, size }}\n    >\n      <div ref={ref} className={twMerge(theme.root.base, className)} {...restProps} />\n    </RatingContext.Provider>\n  );\n});\n\nRating.displayName = \"Rating\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,MAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAkB;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAWC,eAAW,CACvB,CAACC,WAAI,EAASJ,QAAA,CAAAE,KAAY,EAAAG,MAAS,EAAEP,KAAM,CAAAI,KAAA,GAC3C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,QAAQ,CAAC,EAAET,KAAK,CAACS,UAAU,GACtD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,aAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,SAAA;IAAAC,IAAuB,GAAG;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAAd,KAAA,EAAAE,QAAA,CAAAF,KAAA,EAAAO,MAAA;EAC5B,OAAI,eAAcQ,GAAQ,CACtBC,aAAA,CAAAC,QAAA,EACJ;IACMC,KAAA;MAAQd,KAAA,EAAAJ,KAAA,CAAAI,KAAkB;MAAGK,UAAU,EAAAT,KAAK,CAAAS,UAAW;MAAAC,UAAc,EAAAV,KAAK,CAAAU,UAAM;MAASE;IAAG,CAAG;IACrGO,QAAA,iBAAAJ,GAAA;MAAAd,GAAA;MAAAU,SAAA,EAAAS,OAAA,CAAAhB,KAAA,CAAAiB,IAAA,CAAAC,IAAA,EAAAX,SAAA;MAAA,GAAAE;IAAA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}