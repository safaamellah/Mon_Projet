{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useSidebarContext } from './SidebarContext.js';\nimport { sidebarTheme } from './theme.js';\nconst SidebarItems = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme\n  } = useSidebarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([sidebarTheme.items, provider.theme?.sidebar?.items, rootTheme?.items, props.theme], [get(provider.clearTheme, \"sidebar.items\"), get(rootClearTheme, \"items\"), props.clearTheme], [get(provider.applyTheme, \"sidebar.items\"), get(rootApplyTheme, \"items\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarItems);\n  return /* @__PURE__ */jsx(\"div\", {\n    ref,\n    className: twMerge(theme.base, className),\n    \"data-testid\": \"flowbite-sidebar-items\",\n    ...restProps\n  });\n});\nSidebarItems.displayName = \"SidebarItems\";\nexport { SidebarItems };","map":{"version":3,"names":["SidebarItems","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","useSidebarContext","provider","useThemeProvider","useResolveTheme","sidebarTheme","items","sidebar","get","className","restProps","resolveProps","sidebarItems","jsx","twMerge","base"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Sidebar\\SidebarItems.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { useSidebarContext } from \"./SidebarContext\";\nimport { sidebarTheme } from \"./theme\";\n\nexport interface SidebarItemsTheme {\n  base: string;\n}\n\nexport interface SidebarItemsProps extends ComponentProps<\"div\">, ThemingProps<SidebarItemsTheme> {}\n\nexport const SidebarItems = forwardRef<HTMLDivElement, SidebarItemsProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme } = useSidebarContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [sidebarTheme.items, provider.theme?.sidebar?.items, rootTheme?.items, props.theme],\n    [get(provider.clearTheme, \"sidebar.items\"), get(rootClearTheme, \"items\"), props.clearTheme],\n    [get(provider.applyTheme, \"sidebar.items\"), get(rootApplyTheme, \"items\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.sidebarItems);\n\n  return (\n    <div ref={ref} className={twMerge(theme.base, className)} data-testid=\"flowbite-sidebar-items\" {...restProps} />\n  );\n});\n\nSidebarItems.displayName = \"SidebarItems\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,YAAe,GAAAC,UAAW,EAAAC,KAAU,EAAEC,GAAA;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC;EAAA,IAAAC,iBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKR,KAAA,GAAAS,eAAoB,CACrB,CAACC,YAAY,CAACC,KAAA,EAAAJ,QAAY,CAAAP,KAAA,EAAAY,OAAkB,EAAAD,KAAI,EAAAV,SAAc,EAAEU,KAAA,EAAOb,KAAG,CAAAE,KAAM,GAChF,CAACa,GAAG,CAACN,QAAQ,CAACL,UAAU,EAAE,eAAe,CAAC,EAAEW,GAAG,CAACV,cAAc,EAAE,OAAO,CAAC,EAAEL,KAAK,CAACI,UAAU,GAC3F,CAAAW,GAAA,CAAAN,QAAA,CAAAH,UAAA,oBAAAS,GAAA,CAAAR,cAAA,YAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAU,SAAA;IAAA,GAAAC;EAAgC,IAAIC,YAAK,CAAAlB,KAAW,EAAAS,QAAQ,CAAKT,KAAK,EAAEmB,YAAY;EACrF,sBAAAC,GAAA;IAAAnB,GAAA;IAAAe,SAAA,EAAAK,OAAA,CAAAnB,KAAA,CAAAoB,IAAA,EAAAN,SAAA;IAAA;IAAA,GAAAC;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}