{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useNavbarContext } from './NavbarContext.js';\nimport { navbarTheme } from './theme.js';\nconst NavbarLink = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    setIsOpen\n  } = useNavbarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([navbarTheme.link, provider.theme?.navbar?.link, rootTheme?.link, props.theme], [get(provider.clearTheme, \"navbar.link\"), get(rootClearTheme, \"link\"), props.clearTheme], [get(provider.applyTheme, \"navbar.link\"), get(rootApplyTheme, \"link\"), props.applyTheme]);\n  const {\n    active,\n    as: Component = \"a\",\n    disabled,\n    children,\n    className,\n    onClick,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbarLink);\n  function handleClick(event) {\n    setIsOpen(false);\n    onClick?.(event);\n  }\n  return /* @__PURE__ */jsx(\"li\", {\n    ref,\n    children: /* @__PURE__ */jsx(Component, {\n      className: twMerge(theme.base, active && theme.active.on, !active && !disabled && theme.active.off, theme.disabled[disabled ? \"on\" : \"off\"], className),\n      onClick: handleClick,\n      ...restProps,\n      children\n    })\n  });\n});\nNavbarLink.displayName = \"NavbarLink\";\nexport { NavbarLink };","map":{"version":3,"names":["NavbarLink","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","setIsOpen","useNavbarContext","provider","useThemeProvider","useResolveTheme","navbarTheme","link","navbar","get","active","as","Component","disabled","children","className","onClick","restProps","resolveProps","navbarLink","handleClick","event","jsx","twMerge","base","on","off"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Navbar\\NavbarLink.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type ElementType, type MouseEvent } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport { useNavbarContext } from \"./NavbarContext\";\nimport { navbarTheme } from \"./theme\";\n\nexport interface NavbarLinkTheme {\n  base: string;\n  active: FlowbiteBoolean;\n  disabled: FlowbiteBoolean;\n}\n\nexport interface NavbarLinkProps extends ComponentProps<\"a\">, ThemingProps<NavbarLinkTheme> {\n  active?: boolean;\n  as?: ElementType;\n  disabled?: boolean;\n  href?: string;\n}\n\nexport const NavbarLink = forwardRef<HTMLLIElement, NavbarLinkProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, setIsOpen } = useNavbarContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [navbarTheme.link, provider.theme?.navbar?.link, rootTheme?.link, props.theme],\n    [get(provider.clearTheme, \"navbar.link\"), get(rootClearTheme, \"link\"), props.clearTheme],\n    [get(provider.applyTheme, \"navbar.link\"), get(rootApplyTheme, \"link\"), props.applyTheme],\n  );\n\n  const {\n    active,\n    as: Component = \"a\",\n    disabled,\n    children,\n    className,\n    onClick,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbarLink);\n\n  function handleClick(event: MouseEvent<HTMLAnchorElement>) {\n    setIsOpen(false);\n    onClick?.(event);\n  }\n\n  return (\n    <li ref={ref}>\n      <Component\n        className={twMerge(\n          theme.base,\n          active && theme.active.on,\n          !active && !disabled && theme.active.off,\n          theme.disabled[disabled ? \"on\" : \"off\"],\n          className,\n        )}\n        onClick={handleClick}\n        {...restProps}\n      >\n        {children}\n      </Component>\n    </li>\n  );\n});\n\nNavbarLink.displayName = \"NavbarLink\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,UAAa,GAAEC,UAAW,EAAAC,KAAA,EAAUC,GAAE;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC,cAAA;IAAAC;EAAA,IAAAC,gBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKT,KAAA,GAAWU,eAAe,CAC3B,CAACC,WAAI,CAAQC,IAAC,EAAAJ,QAAY,CAAAR,KAAA,EAAAa,MAAc,EAAED,IAAI,EAAAX,SAAA,EAAcW,IAAE,EAAAd,KAAS,CAAAE,KAAM,GAC7E,CAACc,GAAG,CAACN,QAAQ,CAACN,UAAU,EAAE,aAAa,CAAC,EAAEY,GAAG,CAACX,cAAc,EAAE,MAAM,CAAC,EAAEL,KAAK,CAACI,UAAU,GACxF,CAAAY,GAAA,CAAAN,QAAA,CAAAJ,UAAA,kBAAAU,GAAA,CAAAT,cAAA,WAAAP,KAAA,CAAAM,UAAA,CACD;EACF,MAAI;IACAW,MAAI;IACJC,EAAA,EAAAC,SAAQ;IACRC,QAAQ;IACRC,QAAA;IACAC,SAAO;IACPC,OAAG;IACJ,GAAGC;EACJ,IAAAC,YAAS,CAAAzB,KAAY,EAAAU,QAAO,CAAAV,KAAA,EAAA0B,UAAA;EAC9B,SAAIC,WAAgBA,CAAAC,KAAA;IAChBpB,SAAO,CAAG,KAAK,CAAC;IACpBe,OAAA,GAAAK,KAAA;EACE;EACF,OAAI,eAASC,GAAA;IAAA5B,GAAA;IAAAoB,QAAA,iBAAAQ,GAAA,CACTV,SAAA,EACJ;MACAG,SAAc,EAAAQ,OAAI,CACV5B,KAAA,CAAM6B,IAAI,EACVd,MAAC,IAAMf,KAAK,CAAAe,MAAQ,CAAAe,EAAI,EACxB,CAAAf,MAAM,KAAAG,QAAS,IAAQlB,KAAG,CAAIe,MAAG,CAAAgB,GAAM,EACvC/B,KAAA,CAAAkB,QAAA,CAAAA,QAAA,kBACDE,SACD;MACAC,OAAG,EAAAI,WAAS;MACZ,GAAAH,SAAA;MACNH;IACG,CACF;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}