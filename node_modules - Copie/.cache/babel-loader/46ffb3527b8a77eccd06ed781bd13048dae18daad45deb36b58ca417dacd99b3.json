{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useId, useRef, useState, useEffect } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { mergeRefs } from '../../helpers/merge-refs.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { megaMenuTheme } from './theme.js';\nconst MegaMenuDropdownToggle = forwardRef((props, ref) => {\n  const id = useId();\n  const innerRef = useRef(null);\n  const [controls, setControls] = useState(void 0);\n  const [isExpanded, setExpanded] = useState(void 0);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([megaMenuTheme.dropdownToggle, provider.theme?.megaMenu?.dropdownToggle, props.theme], [get(provider.clearTheme, \"megaMenu.dropdownToggle\"), props.clearTheme], [get(provider.applyTheme, \"megaMenu.dropdownToggle\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.megaMenuDropdownToggle);\n  function findDropdown() {\n    const megaMenu = innerRef.current?.closest(\"nav\");\n    return megaMenu?.querySelector('[role=\"menu\"]');\n  }\n  function onClick() {\n    findDropdown()?.classList.toggle(\"hidden\");\n    setExpanded(!isExpanded);\n  }\n  useEffect(() => {\n    const dropdown = findDropdown();\n    const isDropdownHidden = dropdown?.classList.contains(\"hidden\");\n    setControls(dropdown?.id);\n    setExpanded(!isDropdownHidden);\n  }, []);\n  return /* @__PURE__ */jsx(\"button\", {\n    ref: mergeRefs([ref, innerRef]),\n    \"aria-controls\": controls,\n    \"aria-expanded\": isExpanded,\n    \"aria-haspopup\": \"menu\",\n    id,\n    onClick,\n    className: twMerge(theme.base, className),\n    ...restProps\n  });\n});\nMegaMenuDropdownToggle.displayName = \"MegaMenuDropdownToggle\";\nexport { MegaMenuDropdownToggle };","map":{"version":3,"names":["MegaMenuDropdownToggle","forwardRef","props","ref","id","useId","innerRef","useRef","controls","setControls","useState","isExpanded","setExpanded","provider","useThemeProvider","theme","useResolveTheme","megaMenuTheme","dropdownToggle","megaMenu","get","clearTheme","applyTheme","className","restProps","resolveProps","megaMenuDropdownToggle","findDropdown","current","closest","querySelector","onClick","classList","toggle","useEffect","dropdown","isDropdownHidden","contains","jsx","mergeRefs","twMerge","base"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\MegaMenu\\MegaMenuDropdownToggle.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, useEffect, useId, useRef, useState, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { mergeRefs } from \"../../helpers/merge-refs\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { megaMenuTheme } from \"./theme\";\n\nexport interface MegaMenuDropdownToggleTheme {\n  base: string;\n}\n\nexport interface MegaMenuDropdownToggleProps\n  extends ComponentProps<\"button\">,\n    ThemingProps<MegaMenuDropdownToggleTheme> {}\n\nexport const MegaMenuDropdownToggle = forwardRef<HTMLButtonElement, MegaMenuDropdownToggleProps>((props, ref) => {\n  const id = useId();\n  const innerRef = useRef<HTMLButtonElement>(null);\n  const [controls, setControls] = useState<string | undefined>(undefined);\n  const [isExpanded, setExpanded] = useState<boolean | undefined>(undefined);\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [megaMenuTheme.dropdownToggle, provider.theme?.megaMenu?.dropdownToggle, props.theme],\n    [get(provider.clearTheme, \"megaMenu.dropdownToggle\"), props.clearTheme],\n    [get(provider.applyTheme, \"megaMenu.dropdownToggle\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.megaMenuDropdownToggle);\n\n  function findDropdown() {\n    const megaMenu = innerRef.current?.closest(\"nav\");\n\n    return megaMenu?.querySelector('[role=\"menu\"]');\n  }\n\n  function onClick() {\n    findDropdown()?.classList.toggle(\"hidden\");\n\n    setExpanded(!isExpanded);\n  }\n\n  useEffect(() => {\n    const dropdown = findDropdown();\n    const isDropdownHidden = dropdown?.classList.contains(\"hidden\");\n\n    setControls(dropdown?.id);\n    setExpanded(!isDropdownHidden);\n  }, []);\n\n  return (\n    <button\n      ref={mergeRefs([ref, innerRef])}\n      aria-controls={controls}\n      aria-expanded={isExpanded}\n      aria-haspopup=\"menu\"\n      id={id}\n      onClick={onClick}\n      className={twMerge(theme.base, className)}\n      {...restProps}\n    />\n  );\n});\n\nMegaMenuDropdownToggle.displayName = \"MegaMenuDropdownToggle\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,sBAAkB,GAAAC,UAAA,EAAAC,KAAA,EAAAC,GAAA;EAClB,MAAMC,EAAA,GAAAC,KAAQ,CAAG;EACjB,MAAMC,QAAC,GAAUC,MAAA,KAAW,CAAC;EAC7B,MAAM,CAACC,QAAA,EAAUC,WAAE,IAAYC,QAAG,MAAS;EAC3C,MAAM,CAAAC,UAAW,EAAAC,WAAA,IAAgBF,QAAE;EACnC,MAAMG,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAc,CACf,CAACC,aAAa,CAAAC,cAAY,EAAAL,QAAA,CAAAE,KAAA,EAAAI,QAA4B,EAAAD,cAAiB,EAAAhB,KAAA,CAAAa,KAAA,GACvE,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,yBAAyB,CAAC,EAAEnB,KAAK,CAACmB,UAAU,GACvE,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,8BAAApB,KAAA,CAAAoB,UAAA,CACD;EACA;IAAAC,SAAS;IAAA,GAAYC;EAAG,IAAAC,YAAA,CAAAvB,KAAA,EAAAW,QAAA,CAAAX,KAAA,EAAAwB,sBAAA;EAC1B,SAAUC,YAAWA,CAAA;IACjB,MAAAR,QAAO,GAAUb,QAAA,CAAAsB,OAAc,EAAAC,OAAA,MAAgB;IACnD,OAAAV,QAAA,EAAAW,aAAA;EACE;EACF,SAAIC,OAAcA,CAAA,EAAE;IAChBJ,YAAY,CAAC,GAAAK,SAAW,CAAAC,MAAA;IAC5BrB,WAAA,EAAAD,UAAA;EACE;EACFuB,SAAU,OAAQ;IACd,MAAMC,QAAA,GAAAR,YAAmB;IACzB,MAAAS,gBAAsB,GAAGD,QAAA,EAAAH,SAAA,CAAAK,QAAA;IACzB5B,WAAW,CAAC0B,QAAC,EAAA/B,EAAA;IACdQ,WAAK,EAAAwB,gBAAA;EACN;EACF,OAAI,eAAQE,GAAA,CACR,UACJ;IACMnC,GAAA,EAAAoC,SAAA,CAAe,CAAApC,GAAE,EAAAG,QAAQ;IACzB,eAAe,EAAEE,QAAA;IACjB,eAAe,EAAEG,UAAM;IACvB,eAAE;IACFP,EAAA;IACA2B,OAAA;IACAR,SAAG,EAAAiB,OAAA,CAAAzB,KAAA,CAAA0B,IAAA,EAAAlB,SAAA;IACT,GAAAC;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}