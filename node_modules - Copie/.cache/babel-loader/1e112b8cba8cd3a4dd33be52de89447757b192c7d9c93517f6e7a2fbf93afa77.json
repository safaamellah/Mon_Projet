{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useNavbarContext } from './NavbarContext.js';\nimport { navbarTheme } from './theme.js';\nconst NavbarBrand = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme\n  } = useNavbarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([navbarTheme.brand, provider.theme?.navbar?.brand, rootTheme?.brand, props.theme], [get(provider.clearTheme, \"navbar.brand\"), get(rootClearTheme, \"brand\"), props.clearTheme], [get(provider.applyTheme, \"navbar.brand\"), get(rootApplyTheme, \"brand\"), props.applyTheme]);\n  const {\n    as: Component = \"a\",\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbarBrand);\n  return /* @__PURE__ */jsx(Component, {\n    ref,\n    className: twMerge(theme.base, className),\n    ...restProps\n  });\n});\nNavbarBrand.displayName = \"NavbarBrand\";\nexport { NavbarBrand };","map":{"version":3,"names":["NavbarBrand","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","useNavbarContext","provider","useThemeProvider","useResolveTheme","navbarTheme","brand","navbar","get","as","Component","className","restProps","resolveProps","navbarBrand","jsx","twMerge","base"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Navbar\\NavbarBrand.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type ElementType } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { useNavbarContext } from \"./NavbarContext\";\nimport { navbarTheme } from \"./theme\";\n\nexport interface NavbarBrandTheme {\n  base: string;\n}\n\nexport interface NavbarBrandProps extends ComponentProps<\"a\">, ThemingProps<NavbarBrandTheme> {\n  as?: ElementType;\n  href?: string;\n}\n\nexport const NavbarBrand = forwardRef<HTMLAnchorElement, NavbarBrandProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme } = useNavbarContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [navbarTheme.brand, provider.theme?.navbar?.brand, rootTheme?.brand, props.theme],\n    [get(provider.clearTheme, \"navbar.brand\"), get(rootClearTheme, \"brand\"), props.clearTheme],\n    [get(provider.applyTheme, \"navbar.brand\"), get(rootApplyTheme, \"brand\"), props.applyTheme],\n  );\n\n  const { as: Component = \"a\", className, ...restProps } = resolveProps(props, provider.props?.navbarBrand);\n\n  return <Component ref={ref} className={twMerge(theme.base, className)} {...restProps} />;\n});\nNavbarBrand.displayName = \"NavbarBrand\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,WAAe,GAAAC,UAAW,EAAAC,KAAA,EAAUC,GAAE;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC;EAAA,IAAAC,gBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKR,KAAA,GAAWS,eAAQ,CACpB,CAACC,WAAI,CAAQC,KAAC,EAAAJ,QAAY,CAAAP,KAAA,EAAAY,MAAe,EAAED,KAAI,EAAAV,SAAA,EAAcU,KAAE,EAAAb,KAAU,CAAAE,KAAM,GAC/E,CAACa,GAAG,CAACN,QAAQ,CAACL,UAAU,EAAE,cAAc,CAAC,EAAEW,GAAG,CAACV,cAAc,EAAE,OAAO,CAAC,EAAEL,KAAK,CAACI,UAAU,GAC1F,CAAAW,GAAA,CAAAN,QAAA,CAAAH,UAAA,mBAAAS,GAAA,CAAAR,cAAA,YAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAU,EAAA,EAAAC,SAAA,GAAuB,GAAI;IAAAC,SAAW;IAAE,GAAGC;EAAE,CAAS,GAAEC,YAAa,CAACpB,KAAI,EAAES,QAAS,CAACT,KAAK,EAAAqB,WAAY;EACxG,sBAAAC,GAAA,CAAAL,SAAA;IAAAhB,GAAA;IAAAiB,SAAA,EAAAK,OAAA,CAAArB,KAAA,CAAAsB,IAAA,EAAAN,SAAA;IAAA,GAAAC;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}