{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { Tooltip } from '../Tooltip/Tooltip.js';\nimport { copyToClipboard } from './helpers.js';\nimport { clipboardTheme } from './theme.js';\nconst Clipboard = forwardRef((props, ref) => {\n  const [isJustCopied, setIsJustCopied] = useState(false);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([clipboardTheme.button, provider.theme?.clipboard?.button, props.theme], [get(provider.clearTheme, \"clipboard.button\"), props.clearTheme], [get(provider.applyTheme, \"clipboard.button\"), props.applyTheme]);\n  const {\n    className,\n    valueToCopy,\n    label,\n    ...restProps\n  } = resolveProps(props, provider.props?.clipboard);\n  return /* @__PURE__ */jsx(Tooltip, {\n    content: isJustCopied ? \"Copied\" : \"Copy to clipboard\",\n    className: \"[&_*]:cursor-pointer\",\n    children: /* @__PURE__ */jsx(\"button\", {\n      className: twMerge(theme.base, className),\n      onClick: () => copyToClipboard(valueToCopy, setIsJustCopied),\n      ...restProps,\n      ref,\n      children: /* @__PURE__ */jsx(\"span\", {\n        className: theme.label,\n        children: label\n      })\n    })\n  });\n});\nClipboard.displayName = \"Clipboard\";\nexport { Clipboard };","map":{"version":3,"names":["Clipboard","forwardRef","props","ref","isJustCopied","setIsJustCopied","useState","provider","useThemeProvider","theme","useResolveTheme","clipboardTheme","button","clipboard","get","clearTheme","applyTheme","className","valueToCopy","label","restProps","resolveProps","jsx","Tooltip","content","children","twMerge","base","onClick","copyToClipboard"],"sources":["../../../src/components/Clipboard/Clipboard.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, useState, type ComponentProps, type ReactNode } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { Tooltip } from \"../Tooltip/Tooltip\";\nimport type { ClipboardWithIconTheme } from \"./ClipboardWithIcon\";\nimport type { ClipboardWithIconTextTheme } from \"./ClipboardWithIconText\";\nimport { copyToClipboard } from \"./helpers\";\nimport { clipboardTheme } from \"./theme\";\n\nexport interface ClipboardTheme {\n  button: {\n    base: string;\n    label: string;\n  };\n  withIcon: ClipboardWithIconTheme;\n  withIconText: ClipboardWithIconTextTheme;\n}\n\nexport interface ClipboardProps extends ComponentProps<\"button\">, ThemingProps<ClipboardTheme[\"button\"]> {\n  valueToCopy: string;\n  label?: ReactNode;\n}\n\nexport const Clipboard = forwardRef<HTMLButtonElement, ClipboardProps>((props, ref) => {\n  const [isJustCopied, setIsJustCopied] = useState(false);\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [clipboardTheme.button, provider.theme?.clipboard?.button, props.theme],\n    [get(provider.clearTheme, \"clipboard.button\"), props.clearTheme],\n    [get(provider.applyTheme, \"clipboard.button\"), props.applyTheme],\n  );\n\n  const { className, valueToCopy, label, ...restProps } = resolveProps(props, provider.props?.clipboard);\n\n  return (\n    <Tooltip content={isJustCopied ? \"Copied\" : \"Copy to clipboard\"} className=\"[&_*]:cursor-pointer\">\n      <button\n        className={twMerge(theme.base, className)}\n        onClick={() => copyToClipboard(valueToCopy, setIsJustCopied)}\n        {...restProps}\n        ref={ref}\n      >\n        <span className={theme.label}>{label}</span>\n      </button>\n    </Tooltip>\n  );\n});\n\nClipboard.displayName = \"Clipboard\";\n"],"mappings":";;;;;;;;;;;;AAaA,MAAEA,SAAO,GAAAC,UAAc,EAAAC,KAAA,EAAAC,GAAgB,KAAG;EACxC,MAAM,CAAAC,YAAW,EAAAC,eAAkB,IAAAC,QAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAuB,CACxB,CAACC,cAAa,CAAAC,MAAA,EAAUL,QAAE,CAAAE,KAAA,EAAAI,SAAqB,EAAAD,MAAM,EAAAV,KAAW,CAAAO,KAAA,GAChE,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,kBAAkB,CAAC,EAAEb,KAAK,CAACa,UAAU,GAChE,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,uBAAAd,KAAA,CAAAc,UAAA,CACD;EACA;IAAAC,SAAA;IAAAC,WAA2B;IAAAC,KAAS;IAAE,GAAAC;EAAS,IAAAC,YAAe,CAAAnB,KAAW,EAAAK,QAAA,CAAAL,KAAA,EAAmBW,SAAE;EAChG,OAAI,eAAQS,GAAA,CAAAC,OAAA;IAAAC,OAAA,EAAApB,YAAA;IAAAa,SAAA;IAAAQ,QAAA,iBAAAH,GAAA,CACR,UACJ;MACML,SAAS,EAAAS,OAAM,CAAAjB,KAAA,CAAAkB,IAAA,EAAgBV,SAAA;MAC/BW,OAAG,EAAAA,CAAA,KAASC,eAAA,CAAAX,WAAA,EAAAb,eAAA;MACZ,GAAGe,SAAA;MACHjB,GAAA;MACNsB,QAAA,iBAAAH,GAAA;QAAAL,SAAA,EAAAR,KAAA,CAAAU,KAAA;QAAAM,QAAA,EAAAN;MAAA;IACG,CACF;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}