{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { fileInputTheme } from './theme.js';\nconst FileInput = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([fileInputTheme, provider.theme?.fileInput, props.theme], [get(provider.clearTheme, \"fileInput\"), props.clearTheme], [get(provider.applyTheme, \"fileInput\"), props.applyTheme]);\n  const {\n    className,\n    color = \"gray\",\n    sizing = \"md\",\n    ...restProps\n  } = resolveProps(props, provider.props?.fileInput);\n  return /* @__PURE__ */jsx(\"input\", {\n    ref,\n    type: \"file\",\n    className: twMerge(theme.base, theme.colors[color], theme.sizes[sizing], className),\n    ...restProps\n  });\n});\nFileInput.displayName = \"FileInput\";\nexport { FileInput };","map":{"version":3,"names":["FileInput","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","fileInputTheme","fileInput","get","clearTheme","applyTheme","className","color","sizing","restProps","resolveProps","jsx","type","twMerge","base","colors","sizes"],"sources":["../../../src/components/FileInput/FileInput.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, ThemingProps } from \"../../types\";\nimport type { TextInputColors, TextInputSizes } from \"../TextInput\";\nimport { fileInputTheme } from \"./theme\";\n\nexport interface FileInputTheme {\n  base: string;\n  colors: TextInputColors;\n  sizes: TextInputSizes;\n}\n\nexport interface FileInputProps\n  extends Omit<ComponentProps<\"input\">, \"type\" | \"ref\" | \"color\">,\n    ThemingProps<FileInputTheme> {\n  color?: DynamicStringEnumKeysOf<TextInputColors>;\n  sizing?: DynamicStringEnumKeysOf<TextInputSizes>;\n}\n\nexport const FileInput = forwardRef<HTMLInputElement, FileInputProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [fileInputTheme, provider.theme?.fileInput, props.theme],\n    [get(provider.clearTheme, \"fileInput\"), props.clearTheme],\n    [get(provider.applyTheme, \"fileInput\"), props.applyTheme],\n  );\n\n  const { className, color = \"gray\", sizing = \"md\", ...restProps } = resolveProps(props, provider.props?.fileInput);\n\n  return (\n    <input\n      ref={ref}\n      type=\"file\"\n      className={twMerge(theme.base, theme.colors[color], theme.sizes[sizing], className)}\n      {...restProps}\n    />\n  );\n});\n\nFileInput.displayName = \"FileInput\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,SAAM,GAAQC,UAAG,EAAAC,KAAgB,EAAEC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAyB,CAC1B,CAACC,cAAa,EAAAJ,QAAU,CAAEE,KAAA,EAAAG,SAAc,EAAAP,KAAM,CAAAI,KAAA,CAAU,EACxD,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,WAAW,CAAC,EAAET,KAAK,CAACS,UAAU,GACzD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,gBAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,SAAA;IAAAC,KAAuB,GAAG;IAAAC,MAAA;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAAf,KAAA,EAAAE,QAAA,CAAAF,KAAA,EAAAO,SAAA;EAC5B,OAAI,eAAOS,GAAA,CACP,SACJ;IACMf,GAAA;IACAgB,IAAA,QAAW;IACXN,SAAG,EAAAO,OAAA,CAAAd,KAAA,CAAAe,IAAA,EAAAf,KAAA,CAAAgB,MAAA,CAAAR,KAAA,GAAAR,KAAA,CAAAiB,KAAA,CAAAR,MAAA,GAAAF,SAAA;IACT,GAAAG;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}