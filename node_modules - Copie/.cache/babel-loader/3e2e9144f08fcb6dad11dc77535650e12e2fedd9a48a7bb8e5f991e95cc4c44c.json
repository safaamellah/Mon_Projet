{"ast":null,"code":"'use client';\n\nimport { useEffect } from 'react';\nfunction useWatchLocalStorageValue({\n  key: watchKey,\n  onChange\n}) {\n  function handleStorageChange({\n    key,\n    newValue\n  }) {\n    if (key === watchKey) onChange(newValue);\n  }\n  useEffect(() => {\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, []);\n}\nexport { useWatchLocalStorageValue };","map":{"version":3,"names":["useWatchLocalStorageValue","key","watchKey","onChange","handleStorageChange","newValue","useEffect","window","addEventListener","removeEventListener"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\hooks\\use-watch-localstorage-value.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect } from \"react\";\n\n/**\n * Triggers `onChange` when another browser tab instance mutates the LS value.\n */\nexport function useWatchLocalStorageValue({\n  key: watchKey,\n  onChange,\n}: {\n  key: string;\n  onChange(newValue: string | null): void;\n}) {\n  function handleStorageChange({ key, newValue }: StorageEvent) {\n    if (key === watchKey) onChange(newValue);\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, []);\n}\n"],"mappings":";;;AAIA,SAAOA,yBAAQA,CAAA;EACbC,GAAA,EAAAC,QAAA;EACDC;AACD,GAAE;EACF,SAAWC,mBAAeA,CAAA;IAAAH,GAAS;IAAAI;EAAS;IAC5C,IAAAJ,GAAA,KAAAC,QAAA,EAAAC,QAAA,CAAAE,QAAA;EACE;EACFC,SAAW;IACPC,MAAA,CAAOC,gBAAa,YAAAJ,mBAA+B;IACpD,OAAK,MAAAG,MAAA,CAAAE,mBAAA,YAAAL,mBAAA;EACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}