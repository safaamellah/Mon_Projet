{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { TableContext } from './TableContext.js';\nimport { tableTheme } from './theme.js';\nconst Table = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([tableTheme, provider.theme?.table, props.theme], [get(provider.clearTheme, \"table\"), props.clearTheme], [get(provider.applyTheme, \"table\"), props.applyTheme]);\n  const {\n    className,\n    striped,\n    hoverable,\n    ...restProps\n  } = resolveProps(props, provider.props?.table);\n  return /* @__PURE__ */jsx(\"div\", {\n    \"data-testid\": \"table-element\",\n    className: twMerge(theme.root.wrapper),\n    children: /* @__PURE__ */jsxs(TableContext.Provider, {\n      value: {\n        theme: props.theme,\n        clearTheme: props.clearTheme,\n        applyTheme: props.applyTheme,\n        striped,\n        hoverable\n      },\n      children: [/* @__PURE__ */jsx(\"div\", {\n        className: twMerge(theme.root.shadow, className)\n      }), /* @__PURE__ */jsx(\"table\", {\n        ref,\n        className: twMerge(theme.root.base, className),\n        ...restProps\n      })]\n    })\n  });\n});\nTable.displayName = \"Table\";\nexport { Table };","map":{"version":3,"names":["Table","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","tableTheme","table","get","clearTheme","applyTheme","className","striped","hoverable","restProps","resolveProps","jsx","twMerge","root","wrapper","children","jsxs","TableContext","Provider","value","shadow","base"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Table\\Table.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentPropsWithRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport type { TableBodyTheme } from \"./TableBody\";\nimport { TableContext } from \"./TableContext\";\nimport type { TableHeadTheme } from \"./TableHead\";\nimport type { TableRowTheme } from \"./TableRow\";\nimport { tableTheme } from \"./theme\";\n\nexport interface TableTheme {\n  root: TableRootTheme;\n  head: TableHeadTheme;\n  row: TableRowTheme;\n  body: TableBodyTheme;\n}\n\nexport interface TableRootTheme {\n  base: string;\n  shadow: string;\n  wrapper: string;\n}\n\nexport interface TableProps extends ComponentPropsWithRef<\"table\">, ThemingProps<TableTheme> {\n  striped?: boolean;\n  hoverable?: boolean;\n}\n\nexport const Table = forwardRef<HTMLTableElement, TableProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [tableTheme, provider.theme?.table, props.theme],\n    [get(provider.clearTheme, \"table\"), props.clearTheme],\n    [get(provider.applyTheme, \"table\"), props.applyTheme],\n  );\n\n  const { className, striped, hoverable, ...restProps } = resolveProps(props, provider.props?.table);\n\n  return (\n    <div data-testid=\"table-element\" className={twMerge(theme.root.wrapper)}>\n      <TableContext.Provider\n        value={{ theme: props.theme, clearTheme: props.clearTheme, applyTheme: props.applyTheme, striped, hoverable }}\n      >\n        <div className={twMerge(theme.root.shadow, className)}></div>\n        <table ref={ref} className={twMerge(theme.root.base, className)} {...restProps} />\n      </TableContext.Provider>\n    </div>\n  );\n});\n\nTable.displayName = \"Table\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,KAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAgB,KAAE;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAUC,eAAgB,CAC3B,CAACC,UAAI,EAAQJ,QAAC,CAAAE,KAAY,EAAAG,KAAQ,EAAEP,KAAK,CAACI,KAAA,GAC1C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,OAAO,CAAC,EAAET,KAAK,CAACS,UAAU,GACrD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,YAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,SAAA;IAAAC,OAA0B;IAACC,SAAS;IAAA,GAAAC;EAAe,IAAAC,YAAiB,CAAAf,KAAA,EAAAE,QAAW,CAAAF,KAAQ,EAAKO,KAAK,CAAC;EACpG,OAAI,eAAqBS,GAAA;IAAA;IAAAL,SAAA,EAAAM,OAAA,CAAAb,KAAA,CAAAc,IAAA,CAAAC,OAAA;IAAAC,QAAA,iBAAAC,IAAA,CACrBC,YAAA,CAAAC,QAAA,EACJ;MACMC,KAAA;QAAQpB,KAAE,EAAAJ,KAAA,CAAAI,KAAA;QAAAK,UAAA,EAAAT,KAAA,CAAAS,UAAA;QAAAC,UAAA,EAAAV,KAAA,CAAAU,UAAA;QAAAE,OAAA;QAAAC;MAAA;MAChBO,QAAA,GACA,eAAwBJ,GAAG,CAAC,OAAO;QAAEL,SAAO,EAAAM,OAAW,CAAAb,KAAA,CAAOc,IAAC,CAAAO,MAAU,EAACd,SAAM;MAAA,IAChF,eAAAK,GAAA;QAAAf,GAAA;QAAAU,SAAA,EAAAM,OAAA,CAAAb,KAAA,CAAAc,IAAA,CAAAQ,IAAA,EAAAf,SAAA;QAAA,GAAAG;MAAA;IAEG,CACF;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}