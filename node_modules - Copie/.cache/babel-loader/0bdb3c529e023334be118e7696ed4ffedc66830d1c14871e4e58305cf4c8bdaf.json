{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeMode } from '../../hooks/use-theme-mode.js';\nimport { MoonIcon } from '../../icons/moon-icon.js';\nimport { SunIcon } from '../../icons/sun-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { darkThemeToggleTheme } from './theme.js';\nconst DarkThemeToggle = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([darkThemeToggleTheme, provider.theme?.darkThemeToggle, props.theme], [get(provider.clearTheme, \"darkThemeToggle\"), props.clearTheme], [get(provider.applyTheme, \"darkThemeToggle\"), props.applyTheme]);\n  const {\n    className,\n    iconDark: IconDark = SunIcon,\n    iconLight: IconLight = MoonIcon,\n    ...restProps\n  } = resolveProps(props, provider.props?.darkThemeToggle);\n  const {\n    toggleMode\n  } = useThemeMode();\n  return /* @__PURE__ */jsxs(\"button\", {\n    ref,\n    type: \"button\",\n    \"aria-label\": \"Toggle dark mode\",\n    \"data-testid\": \"dark-theme-toggle\",\n    className: twMerge(theme.root.base, className),\n    onClick: toggleMode,\n    ...restProps,\n    children: [/* @__PURE__ */jsx(IconDark, {\n      \"aria-label\": \"Currently dark mode\",\n      className: twMerge(theme.root.icon.base, theme.root.icon.dark)\n    }), /* @__PURE__ */jsx(IconLight, {\n      \"aria-label\": \"Currently light mode\",\n      className: twMerge(theme.root.icon.base, theme.root.icon.light)\n    })]\n  });\n});\nDarkThemeToggle.displayName = \"DarkThemeToggle\";\nexport { DarkThemeToggle };","map":{"version":3,"names":["DarkThemeToggle","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","darkThemeToggleTheme","darkThemeToggle","get","clearTheme","applyTheme","className","iconDark","IconDark","SunIcon","iconLight","IconLight","MoonIcon","restProps","resolveProps","toggleMode","useThemeMode","jsxs","type","twMerge","root","base","onClick","children","jsx","icon","dark","light"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\DarkThemeToggle\\DarkThemeToggle.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type FC } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeMode } from \"../../hooks/use-theme-mode\";\nimport { MoonIcon } from \"../../icons/moon-icon\";\nimport { SunIcon } from \"../../icons/sun-icon\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { darkThemeToggleTheme } from \"./theme\";\n\nexport interface DarkThemeToggleTheme {\n  root: DarkThemeToggleRootTheme;\n}\n\nexport interface DarkThemeToggleRootTheme {\n  base: string;\n  icon: {\n    base: string;\n    light: string;\n    dark: string;\n  };\n}\n\nexport interface DarkThemeToggleProps extends ComponentProps<\"button\">, ThemingProps<DarkThemeToggleTheme> {\n  iconDark?: FC<ComponentProps<\"svg\">>;\n  iconLight?: FC<ComponentProps<\"svg\">>;\n}\n\nexport const DarkThemeToggle = forwardRef<HTMLButtonElement, DarkThemeToggleProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [darkThemeToggleTheme, provider.theme?.darkThemeToggle, props.theme],\n    [get(provider.clearTheme, \"darkThemeToggle\"), props.clearTheme],\n    [get(provider.applyTheme, \"darkThemeToggle\"), props.applyTheme],\n  );\n\n  const {\n    className,\n    iconDark: IconDark = SunIcon,\n    iconLight: IconLight = MoonIcon,\n    ...restProps\n  } = resolveProps(props, provider.props?.darkThemeToggle);\n\n  const { toggleMode } = useThemeMode();\n\n  return (\n    <button\n      ref={ref}\n      type=\"button\"\n      aria-label=\"Toggle dark mode\"\n      data-testid=\"dark-theme-toggle\"\n      className={twMerge(theme.root.base, className)}\n      onClick={toggleMode}\n      {...restProps}\n    >\n      <IconDark aria-label=\"Currently dark mode\" className={twMerge(theme.root.icon.base, theme.root.icon.dark)} />\n      <IconLight aria-label=\"Currently light mode\" className={twMerge(theme.root.icon.base, theme.root.icon.light)} />\n    </button>\n  );\n});\n\nDarkThemeToggle.displayName = \"DarkThemeToggle\";\n"],"mappings":";;;;;;;;;;;;;AAcA,MAAEA,eAAiB,GAAAC,UAAA,CAAgB,CAAAC,KAAE,EAAAC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAsB,CACvB,CAACC,oBAAa,EAAAJ,QAAY,CAAAE,KAAA,EAAAG,eAA0B,EAAAP,KAAA,CAAUI,KAAC,GAC/D,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,iBAAiB,CAAC,EAAET,KAAK,CAACS,UAAU,GAC/D,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,sBAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAI;IACAC,SAAQ;IACRC,QAAA,EAASC,QAAE,GAASC,OAAG;IACvBC,SAAG,EAAAC,SAAA,GAAAC,QAAA;IACJ,GAAGC;EACJ,IAAAC,YAAQ,CAAAnB,KAAY,EAAGE,QAAA,CAAAF,KAAc,EAAAO,eAAA;EACrC;IAAAa;EAAA,IAAuBC,YAAI;EAC7B,OAAI,eAAQC,IAAA,CACR,UACJ;IACMrB,GAAA;IACAsB,IAAA,UAAc;IACd,cAAa,kBAAE;IACf,aAAW,qBAAuB;IAClCZ,SAAS,EAAAa,OAAA,CAAUpB,KAAA,CAAAqB,IAAA,CAAAC,IAAA,EAAAf,SAAA;IACnBgB,OAAG,EAAAP,UAAS;IACZ,GAAAF,SAAU;IAChBU,QAAA,GACA,eAAwBC,GAAG,CAAChB,QAAA,EAAS;MAAE,YAAE,EAAY,qBAAE;MAAsBF,SAAE,EAASa,OAAE,CAAApB,KAAQ,CAAAqB,IAAM,CAAAK,IAAK,CAAAJ,IAAK,EAAItB,KAAE,CAAAqB,IAAM,CAAAK,IAAK,CAAAC,IAAK;IAAA,CAAK,CAAC,EAC9I,eAAAF,GAAA,CAAAb,SAAA;MAAA;MAAAL,SAAA,EAAAa,OAAA,CAAApB,KAAA,CAAAqB,IAAA,CAAAK,IAAA,CAAAJ,IAAA,EAAAtB,KAAA,CAAAqB,IAAA,CAAAK,IAAA,CAAAE,KAAA;IAAA;EAEG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}