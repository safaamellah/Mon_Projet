{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { helperTextTheme } from './theme.js';\nconst HelperText = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([helperTextTheme, provider.theme?.helperText, props.theme], [get(provider.clearTheme, \"helperText\"), props.clearTheme], [get(provider.applyTheme, \"helperText\"), props.applyTheme]);\n  const {\n    className,\n    color = \"gray\",\n    ...restProps\n  } = resolveProps(props, provider.props?.helperText);\n  return /* @__PURE__ */jsx(\"p\", {\n    ref,\n    className: twMerge(theme.root.base, theme.root.colors[color], className),\n    ...restProps\n  });\n});\nHelperText.displayName = \"HelperText\";\nexport { HelperText };","map":{"version":3,"names":["HelperText","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","helperTextTheme","helperText","get","clearTheme","applyTheme","className","color","restProps","resolveProps","jsx","twMerge","root","base","colors"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\HelperText\\HelperText.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, FlowbiteColors, ThemingProps } from \"../../types\";\nimport { helperTextTheme } from \"./theme\";\n\nexport interface HelperTextTheme {\n  root: HelperTextRootTheme;\n}\n\nexport interface HelperTextRootTheme {\n  base: string;\n  colors: HelperColors;\n}\n\nexport interface HelperColors extends Pick<FlowbiteColors, \"gray\" | \"info\" | \"failure\" | \"warning\" | \"success\"> {\n  [key: string]: string;\n}\n\nexport interface HelperTextProps extends Omit<ComponentProps<\"p\">, \"color\">, ThemingProps<HelperTextTheme> {\n  color?: DynamicStringEnumKeysOf<HelperColors>;\n}\n\nexport const HelperText = forwardRef<HTMLParagraphElement, HelperTextProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [helperTextTheme, provider.theme?.helperText, props.theme],\n    [get(provider.clearTheme, \"helperText\"), props.clearTheme],\n    [get(provider.applyTheme, \"helperText\"), props.applyTheme],\n  );\n\n  const { className, color = \"gray\", ...restProps } = resolveProps(props, provider.props?.helperText);\n\n  return <p ref={ref} className={twMerge(theme.root.base, theme.root.colors[color], className)} {...restProps} />;\n});\n\nHelperText.displayName = \"HelperText\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,UAAc,GAAGC,UAAA,EAAAC,KAAgB,EAAEC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAA0B,CAC3B,CAACC,eAAa,EAAAJ,QAAY,CAAAE,KAAA,EAAAG,UAAe,EAAKP,KAAC,CAAAI,KAAU,CAAC,EAC1D,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,YAAY,CAAC,EAAET,KAAK,CAACS,UAAU,GAC1D,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,iBAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,SAAA;IAAAC,KAAuB,GAAI,MAAK;IAAE,GAAGC;EAAW,IAAEC,YAAc,CAAAd,KAAK,EAAAE,QAAW,CAACF,KAAK,EAAAO,UAAY,CAAC;EACpG,sBAAAQ,GAAA;IAAAd,GAAA;IAAAU,SAAA,EAAAK,OAAA,CAAAZ,KAAA,CAAAa,IAAA,CAAAC,IAAA,EAAAd,KAAA,CAAAa,IAAA,CAAAE,MAAA,CAAAP,KAAA,GAAAD,SAAA;IAAA,GAAAE;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}