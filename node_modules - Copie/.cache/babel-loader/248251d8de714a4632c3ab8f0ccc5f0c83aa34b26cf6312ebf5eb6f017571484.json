{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { BarsIcon } from '../../icons/bars-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useNavbarContext } from './NavbarContext.js';\nimport { navbarTheme } from './theme.js';\nconst NavbarToggle = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    isOpen,\n    setIsOpen\n  } = useNavbarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([navbarTheme.toggle, provider.theme?.navbar?.toggle, rootTheme?.toggle, props.theme], [get(provider.clearTheme, \"navbar.toggle\"), get(rootClearTheme, \"toggle\"), props.clearTheme], [get(provider.applyTheme, \"navbar.toggle\"), get(rootApplyTheme, \"toggle\"), props.applyTheme]);\n  const {\n    barIcon: BarIcon = BarsIcon,\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbarToggle);\n  function handleClick() {\n    setIsOpen(!isOpen);\n  }\n  return /* @__PURE__ */jsxs(\"button\", {\n    ref,\n    \"data-testid\": \"flowbite-navbar-toggle\",\n    onClick: handleClick,\n    className: twMerge(theme.base, className),\n    ...restProps,\n    children: [/* @__PURE__ */jsx(\"span\", {\n      className: theme.title,\n      children: \"Open main menu\"\n    }), /* @__PURE__ */jsx(BarIcon, {\n      \"aria-hidden\": true,\n      className: theme.icon\n    })]\n  });\n});\nNavbarToggle.displayName = \"NavbarToggle\";\nexport { NavbarToggle };","map":{"version":3,"names":["jsxs","jsx","forwardRef","get","resolveProps","useResolveTheme","twMerge","BarsIcon","useThemeProvider","useNavbarContext","navbarTheme","NavbarToggle","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","isOpen","setIsOpen","provider","toggle","navbar","barIcon","BarIcon","className","restProps","navbarToggle","handleClick","onClick","base","children","title","icon","displayName"],"sources":["C:/Users/PC/mon-projet-react/node_modules/flowbite-react/dist/components/Navbar/NavbarToggle.js"],"sourcesContent":["'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { BarsIcon } from '../../icons/bars-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useNavbarContext } from './NavbarContext.js';\nimport { navbarTheme } from './theme.js';\n\nconst NavbarToggle = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    isOpen,\n    setIsOpen\n  } = useNavbarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [navbarTheme.toggle, provider.theme?.navbar?.toggle, rootTheme?.toggle, props.theme],\n    [get(provider.clearTheme, \"navbar.toggle\"), get(rootClearTheme, \"toggle\"), props.clearTheme],\n    [get(provider.applyTheme, \"navbar.toggle\"), get(rootApplyTheme, \"toggle\"), props.applyTheme]\n  );\n  const { barIcon: BarIcon = BarsIcon, className, ...restProps } = resolveProps(props, provider.props?.navbarToggle);\n  function handleClick() {\n    setIsOpen(!isOpen);\n  }\n  return /* @__PURE__ */ jsxs(\n    \"button\",\n    {\n      ref,\n      \"data-testid\": \"flowbite-navbar-toggle\",\n      onClick: handleClick,\n      className: twMerge(theme.base, className),\n      ...restProps,\n      children: [\n        /* @__PURE__ */ jsx(\"span\", { className: theme.title, children: \"Open main menu\" }),\n        /* @__PURE__ */ jsx(BarIcon, { \"aria-hidden\": true, className: theme.icon })\n      ]\n    }\n  );\n});\nNavbarToggle.displayName = \"NavbarToggle\";\n\nexport { NavbarToggle };\n//# sourceMappingURL=NavbarToggle.js.map\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,IAAI,EAAEC,GAAG,QAAQ,mBAAmB;AAC7C,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,GAAG,QAAQ,sBAAsB;AAC1C,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,OAAO,QAAQ,iCAAiC;AACzD,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,WAAW,QAAQ,YAAY;AAExC,MAAMC,YAAY,GAAGT,UAAU,CAAC,CAACU,KAAK,EAAEC,GAAG,KAAK;EAC9C,MAAM;IACJC,KAAK,EAAEC,SAAS;IAChBC,UAAU,EAAEC,cAAc;IAC1BC,UAAU,EAAEC,cAAc;IAC1BC,MAAM;IACNC;EACF,CAAC,GAAGZ,gBAAgB,CAAC,CAAC;EACtB,MAAMa,QAAQ,GAAGd,gBAAgB,CAAC,CAAC;EACnC,MAAMM,KAAK,GAAGT,eAAe,CAC3B,CAACK,WAAW,CAACa,MAAM,EAAED,QAAQ,CAACR,KAAK,EAAEU,MAAM,EAAED,MAAM,EAAER,SAAS,EAAEQ,MAAM,EAAEX,KAAK,CAACE,KAAK,CAAC,EACpF,CAACX,GAAG,CAACmB,QAAQ,CAACN,UAAU,EAAE,eAAe,CAAC,EAAEb,GAAG,CAACc,cAAc,EAAE,QAAQ,CAAC,EAAEL,KAAK,CAACI,UAAU,CAAC,EAC5F,CAACb,GAAG,CAACmB,QAAQ,CAACJ,UAAU,EAAE,eAAe,CAAC,EAAEf,GAAG,CAACgB,cAAc,EAAE,QAAQ,CAAC,EAAEP,KAAK,CAACM,UAAU,CAC7F,CAAC;EACD,MAAM;IAAEO,OAAO,EAAEC,OAAO,GAAGnB,QAAQ;IAAEoB,SAAS;IAAE,GAAGC;EAAU,CAAC,GAAGxB,YAAY,CAACQ,KAAK,EAAEU,QAAQ,CAACV,KAAK,EAAEiB,YAAY,CAAC;EAClH,SAASC,WAAWA,CAAA,EAAG;IACrBT,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB;EACA,OAAO,eAAgBpB,IAAI,CACzB,QAAQ,EACR;IACEa,GAAG;IACH,aAAa,EAAE,wBAAwB;IACvCkB,OAAO,EAAED,WAAW;IACpBH,SAAS,EAAErB,OAAO,CAACQ,KAAK,CAACkB,IAAI,EAAEL,SAAS,CAAC;IACzC,GAAGC,SAAS;IACZK,QAAQ,EAAE,CACR,eAAgBhC,GAAG,CAAC,MAAM,EAAE;MAAE0B,SAAS,EAAEb,KAAK,CAACoB,KAAK;MAAED,QAAQ,EAAE;IAAiB,CAAC,CAAC,EACnF,eAAgBhC,GAAG,CAACyB,OAAO,EAAE;MAAE,aAAa,EAAE,IAAI;MAAEC,SAAS,EAAEb,KAAK,CAACqB;IAAK,CAAC,CAAC;EAEhF,CACF,CAAC;AACH,CAAC,CAAC;AACFxB,YAAY,CAACyB,WAAW,GAAG,cAAc;AAEzC,SAASzB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}