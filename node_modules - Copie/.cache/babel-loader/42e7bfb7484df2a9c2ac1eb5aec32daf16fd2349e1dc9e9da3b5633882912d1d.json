{"ast":null,"code":"const cache = /* @__PURE__ */new Map();\nfunction applyPrefixV3(classNames, prefix, separator = \":\") {\n  if (!classNames.trim().length || !prefix.trim().length) {\n    return classNames;\n  }\n  classNames = classNames.trim();\n  prefix = prefix.trim();\n  separator = separator.trim();\n  const cacheKey = `${classNames}.${prefix}.${separator}`;\n  const cacheValue = cache.get(cacheKey);\n  if (cacheValue) {\n    return cacheValue;\n  }\n  const result = classNames.split(/\\s+/).map(className => {\n    className = className.trim();\n    if (!className.length) {\n      return className;\n    }\n    if (className.startsWith(\"[\") && className.endsWith(\"]\")) {\n      return className;\n    }\n    const parts = className.split(separator);\n    const baseClass = parts.pop() ?? \"\";\n    let prefixedBaseClass = baseClass;\n    let modifiers = \"\";\n    if (prefixedBaseClass[0] === \"!\") {\n      modifiers = \"!\";\n      prefixedBaseClass = prefixedBaseClass.slice(1);\n    }\n    if (prefixedBaseClass[0] === \"-\") {\n      modifiers += \"-\";\n      prefixedBaseClass = prefixedBaseClass.slice(1);\n    }\n    if (prefixedBaseClass.startsWith(prefix)) {\n      return className;\n    }\n    prefixedBaseClass = modifiers + prefix + prefixedBaseClass;\n    if (!parts.length) {\n      return prefixedBaseClass;\n    }\n    return `${parts.join(separator)}${separator}${prefixedBaseClass}`;\n  }).join(\" \");\n  cache.set(cacheKey, result);\n  return result;\n}\nexport { applyPrefixV3 };","map":{"version":3,"names":["cache","Map","applyPrefixV3","classNames","prefix","separator","trim","length","cacheKey","cacheValue","get","result","split","map","className","startsWith","endsWith","parts","baseClass","pop","prefixedBaseClass","modifiers","slice","join","set"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\helpers\\apply-prefix-v3.ts"],"sourcesContent":["const cache = new Map<string, string>();\n\n/**\n * Applies a prefix to class names while preserving modifiers and arbitrary values.\n *\n * @param classNames - A string containing one or more CSS class names separated by spaces\n * @param prefix - The prefix to be added to each class name\n * @param separator - The separator used between class name parts (default \":\")\n * @returns A new string with the prefix applied to each class name\n */\nexport function applyPrefixV3(classNames: string, prefix: string, separator = \":\"): string {\n  if (!classNames.trim().length || !prefix.trim().length) {\n    return classNames;\n  }\n\n  classNames = classNames.trim();\n  prefix = prefix.trim();\n  separator = separator.trim();\n\n  const cacheKey = `${classNames}.${prefix}.${separator}`;\n  const cacheValue = cache.get(cacheKey);\n\n  if (cacheValue) {\n    return cacheValue;\n  }\n\n  const result = classNames\n    .split(/\\s+/)\n    .map((className) => {\n      className = className.trim();\n\n      if (!className.length) {\n        return className;\n      }\n\n      if (className.startsWith(\"[\") && className.endsWith(\"]\")) {\n        return className;\n      }\n\n      const parts = className.split(separator);\n      const baseClass = parts.pop() ?? \"\";\n\n      let prefixedBaseClass = baseClass;\n\n      let modifiers = \"\";\n      if (prefixedBaseClass[0] === \"!\") {\n        modifiers = \"!\";\n        prefixedBaseClass = prefixedBaseClass.slice(1);\n      }\n      if (prefixedBaseClass[0] === \"-\") {\n        modifiers += \"-\";\n        prefixedBaseClass = prefixedBaseClass.slice(1);\n      }\n\n      if (prefixedBaseClass.startsWith(prefix)) {\n        return className;\n      }\n\n      prefixedBaseClass = modifiers + prefix + prefixedBaseClass;\n\n      if (!parts.length) {\n        return prefixedBaseClass;\n      }\n\n      return `${parts.join(separator)}${separator}${prefixedBaseClass}`;\n    })\n    .join(\" \");\n\n  cache.set(cacheKey, result);\n\n  return result;\n}\n"],"mappings":"AACA,MAAMA,KAAK,kBAAmB,IAAIC,GAAG,EAAE;AAChC,SAASC,aAAaA,CAACC,UAAU,EAAEC,MAAM,EAAEC,SAAS,GAAG,GAAG,EAAE;EACjE,IAAI,CAACF,UAAU,CAACG,IAAI,EAAE,CAACC,MAAM,IAAI,CAACH,MAAM,CAACE,IAAI,EAAE,CAACC,MAAM,EAAE;IACtD,OAAOJ,UAAU;EACrB;EACEA,UAAU,GAAGA,UAAU,CAACG,IAAI,EAAE;EAC9BF,MAAM,GAAGA,MAAM,CAACE,IAAI,EAAE;EACtBD,SAAS,GAAGA,SAAS,CAACC,IAAI,EAAE;EAC5B,MAAME,QAAQ,GAAG,GAAGL,UAAU,IAAIC,MAAM,IAAIC,SAAS,EAAE;EACvD,MAAMI,UAAU,GAAGT,KAAK,CAACU,GAAG,CAACF,QAAQ,CAAC;EACtC,IAAIC,UAAU,EAAE;IACd,OAAOA,UAAU;EACrB;EACE,MAAME,MAAM,GAAGR,UAAU,CAACS,KAAK,CAAC,KAAK,CAAC,CAACC,GAAG,CAAEC,SAAS,IAAK;IACxDA,SAAS,GAAGA,SAAS,CAACR,IAAI,EAAE;IAC5B,IAAI,CAACQ,SAAS,CAACP,MAAM,EAAE;MACrB,OAAOO,SAAS;IACtB;IACI,IAAIA,SAAS,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,SAAS,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;MACxD,OAAOF,SAAS;IACtB;IACI,MAAMG,KAAK,GAAGH,SAAS,CAACF,KAAK,CAACP,SAAS,CAAC;IACxC,MAAMa,SAAS,GAAGD,KAAK,CAACE,GAAG,EAAE,IAAI,EAAE;IACnC,IAAIC,iBAAiB,GAAGF,SAAS;IACjC,IAAIG,SAAS,GAAG,EAAE;IAClB,IAAID,iBAAiB,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAChCC,SAAS,GAAG,GAAG;MACfD,iBAAiB,GAAGA,iBAAiB,CAACE,KAAK,CAAC,CAAC,CAAC;IACpD;IACI,IAAIF,iBAAiB,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAChCC,SAAS,IAAI,GAAG;MAChBD,iBAAiB,GAAGA,iBAAiB,CAACE,KAAK,CAAC,CAAC,CAAC;IACpD;IACI,IAAIF,iBAAiB,CAACL,UAAU,CAACX,MAAM,CAAC,EAAE;MACxC,OAAOU,SAAS;IACtB;IACIM,iBAAiB,GAAGC,SAAS,GAAGjB,MAAM,GAAGgB,iBAAiB;IAC1D,IAAI,CAACH,KAAK,CAACV,MAAM,EAAE;MACjB,OAAOa,iBAAiB;IAC9B;IACI,OAAO,GAAGH,KAAK,CAACM,IAAI,CAAClB,SAAS,CAAC,GAAGA,SAAS,GAAGe,iBAAiB,EAAE;EACrE,CAAG,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC;EACZvB,KAAK,CAACwB,GAAG,CAAChB,QAAQ,EAAEG,MAAM,CAAC;EAC3B,OAAOA,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}