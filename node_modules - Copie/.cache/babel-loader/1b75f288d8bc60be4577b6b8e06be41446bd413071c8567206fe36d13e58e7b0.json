{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useNavbarContext } from './NavbarContext.js';\nimport { navbarTheme } from './theme.js';\nconst NavbarLink = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    setIsOpen\n  } = useNavbarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([navbarTheme.link, provider.theme?.navbar?.link, rootTheme?.link, props.theme], [get(provider.clearTheme, \"navbar.link\"), get(rootClearTheme, \"link\"), props.clearTheme], [get(provider.applyTheme, \"navbar.link\"), get(rootApplyTheme, \"link\"), props.applyTheme]);\n  const {\n    active,\n    as: Component = \"a\",\n    disabled,\n    children,\n    className,\n    onClick,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbarLink);\n  function handleClick(event) {\n    setIsOpen(false);\n    onClick?.(event);\n  }\n  return /* @__PURE__ */jsx(\"li\", {\n    ref,\n    children: /* @__PURE__ */jsx(Component, {\n      className: twMerge(theme.base, active && theme.active.on, !active && !disabled && theme.active.off, theme.disabled[disabled ? \"on\" : \"off\"], className),\n      onClick: handleClick,\n      ...restProps,\n      children\n    })\n  });\n});\nNavbarLink.displayName = \"NavbarLink\";\nexport { NavbarLink };","map":{"version":3,"names":["jsx","forwardRef","get","resolveProps","useResolveTheme","twMerge","useThemeProvider","useNavbarContext","navbarTheme","NavbarLink","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","setIsOpen","provider","link","navbar","active","as","Component","disabled","children","className","onClick","restProps","navbarLink","handleClick","event","base","on","off","displayName"],"sources":["C:/Users/PC/mon-projet-react/node_modules/flowbite-react/dist/components/Navbar/NavbarLink.js"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useNavbarContext } from './NavbarContext.js';\nimport { navbarTheme } from './theme.js';\n\nconst NavbarLink = forwardRef((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, setIsOpen } = useNavbarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [navbarTheme.link, provider.theme?.navbar?.link, rootTheme?.link, props.theme],\n    [get(provider.clearTheme, \"navbar.link\"), get(rootClearTheme, \"link\"), props.clearTheme],\n    [get(provider.applyTheme, \"navbar.link\"), get(rootApplyTheme, \"link\"), props.applyTheme]\n  );\n  const {\n    active,\n    as: Component = \"a\",\n    disabled,\n    children,\n    className,\n    onClick,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbarLink);\n  function handleClick(event) {\n    setIsOpen(false);\n    onClick?.(event);\n  }\n  return /* @__PURE__ */ jsx(\"li\", { ref, children: /* @__PURE__ */ jsx(\n    Component,\n    {\n      className: twMerge(\n        theme.base,\n        active && theme.active.on,\n        !active && !disabled && theme.active.off,\n        theme.disabled[disabled ? \"on\" : \"off\"],\n        className\n      ),\n      onClick: handleClick,\n      ...restProps,\n      children\n    }\n  ) });\n});\nNavbarLink.displayName = \"NavbarLink\";\n\nexport { NavbarLink };\n//# sourceMappingURL=NavbarLink.js.map\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,QAAQ,mBAAmB;AACvC,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,GAAG,QAAQ,sBAAsB;AAC1C,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,OAAO,QAAQ,iCAAiC;AACzD,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,WAAW,QAAQ,YAAY;AAExC,MAAMC,UAAU,GAAGR,UAAU,CAAC,CAACS,KAAK,EAAEC,GAAG,KAAK;EAC5C,MAAM;IAAEC,KAAK,EAAEC,SAAS;IAAEC,UAAU,EAAEC,cAAc;IAAEC,UAAU,EAAEC,cAAc;IAAEC;EAAU,CAAC,GAAGX,gBAAgB,CAAC,CAAC;EAClH,MAAMY,QAAQ,GAAGb,gBAAgB,CAAC,CAAC;EACnC,MAAMM,KAAK,GAAGR,eAAe,CAC3B,CAACI,WAAW,CAACY,IAAI,EAAED,QAAQ,CAACP,KAAK,EAAES,MAAM,EAAED,IAAI,EAAEP,SAAS,EAAEO,IAAI,EAAEV,KAAK,CAACE,KAAK,CAAC,EAC9E,CAACV,GAAG,CAACiB,QAAQ,CAACL,UAAU,EAAE,aAAa,CAAC,EAAEZ,GAAG,CAACa,cAAc,EAAE,MAAM,CAAC,EAAEL,KAAK,CAACI,UAAU,CAAC,EACxF,CAACZ,GAAG,CAACiB,QAAQ,CAACH,UAAU,EAAE,aAAa,CAAC,EAAEd,GAAG,CAACe,cAAc,EAAE,MAAM,CAAC,EAAEP,KAAK,CAACM,UAAU,CACzF,CAAC;EACD,MAAM;IACJM,MAAM;IACNC,EAAE,EAAEC,SAAS,GAAG,GAAG;IACnBC,QAAQ;IACRC,QAAQ;IACRC,SAAS;IACTC,OAAO;IACP,GAAGC;EACL,CAAC,GAAG1B,YAAY,CAACO,KAAK,EAAES,QAAQ,CAACT,KAAK,EAAEoB,UAAU,CAAC;EACnD,SAASC,WAAWA,CAACC,KAAK,EAAE;IAC1Bd,SAAS,CAAC,KAAK,CAAC;IAChBU,OAAO,GAAGI,KAAK,CAAC;EAClB;EACA,OAAO,eAAgBhC,GAAG,CAAC,IAAI,EAAE;IAAEW,GAAG;IAAEe,QAAQ,EAAE,eAAgB1B,GAAG,CACnEwB,SAAS,EACT;MACEG,SAAS,EAAEtB,OAAO,CAChBO,KAAK,CAACqB,IAAI,EACVX,MAAM,IAAIV,KAAK,CAACU,MAAM,CAACY,EAAE,EACzB,CAACZ,MAAM,IAAI,CAACG,QAAQ,IAAIb,KAAK,CAACU,MAAM,CAACa,GAAG,EACxCvB,KAAK,CAACa,QAAQ,CAACA,QAAQ,GAAG,IAAI,GAAG,KAAK,CAAC,EACvCE,SACF,CAAC;MACDC,OAAO,EAAEG,WAAW;MACpB,GAAGF,SAAS;MACZH;IACF,CACF;EAAE,CAAC,CAAC;AACN,CAAC,CAAC;AACFjB,UAAU,CAAC2B,WAAW,GAAG,YAAY;AAErC,SAAS3B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}