{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useListNavigation, useTypeahead, FloatingFocusManager, FloatingList } from '@floating-ui/react';\nimport { useState, useRef, useCallback, useMemo, useEffect, cloneElement } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useBaseFLoating, useFloatingInteractions } from '../../hooks/use-floating.js';\nimport { ChevronDownIcon } from '../../icons/chevron-down-icon.js';\nimport { ChevronLeftIcon } from '../../icons/chevron-left-icon.js';\nimport { ChevronRightIcon } from '../../icons/chevron-right-icon.js';\nimport { ChevronUpIcon } from '../../icons/chevron-up-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { Button } from '../Button/Button.js';\nimport '../Button/ButtonGroup.js';\nimport '../Button/ButtonGroupContext.js';\nimport { DropdownContext } from './DropdownContext.js';\nimport { dropdownTheme } from './theme.js';\nconst icons = {\n  top: ChevronUpIcon,\n  right: ChevronRightIcon,\n  bottom: ChevronDownIcon,\n  left: ChevronLeftIcon\n};\nfunction Trigger({\n  refs,\n  children,\n  inline,\n  theme,\n  disabled,\n  setButtonWidth,\n  getReferenceProps,\n  renderTrigger,\n  ...buttonProps\n}) {\n  const ref = refs.reference;\n  const a11yProps = getReferenceProps();\n  useEffect(() => {\n    if (ref.current) {\n      setButtonWidth?.(ref.current.clientWidth);\n    }\n  }, [ref, setButtonWidth]);\n  if (renderTrigger) {\n    const triggerElement = renderTrigger(theme);\n    return cloneElement(triggerElement, {\n      ref: refs.setReference,\n      disabled,\n      ...a11yProps,\n      ...triggerElement.props\n    });\n  }\n  return inline ? /* @__PURE__ */jsx(\"button\", {\n    type: \"button\",\n    ref: refs.setReference,\n    className: theme?.inlineWrapper,\n    disabled,\n    ...a11yProps,\n    children\n  }) : /* @__PURE__ */jsx(Button, {\n    ...buttonProps,\n    disabled,\n    type: \"button\",\n    ref: refs.setReference,\n    ...a11yProps,\n    children\n  });\n}\nfunction Dropdown(props) {\n  const [open, setOpen] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [buttonWidth, setButtonWidth] = useState(void 0);\n  const elementsRef = useRef([]);\n  const labelsRef = useRef([]);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([dropdownTheme, provider.theme?.dropdown, props.theme], [get(provider.clearTheme, \"dropdown\"), props.clearTheme], [get(provider.applyTheme, \"dropdown\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    dismissOnClick = true,\n    enableTypeAhead = true,\n    renderTrigger,\n    ...restProps\n  } = resolveProps(props, provider.props?.dropdown);\n  const {\n    placement = restProps.inline ? \"bottom-start\" : \"bottom\",\n    trigger = \"click\",\n    label,\n    inline,\n    arrowIcon = true,\n    ...buttonProps\n  } = restProps;\n  const dataTestId = restProps[\"data-testid\"] || \"flowbite-dropdown-target\";\n  const handleSelect = useCallback(index => {\n    setSelectedIndex(index);\n    setOpen(false);\n  }, []);\n  const handleTypeaheadMatch = useCallback(index => {\n    if (open) {\n      setActiveIndex(index);\n    } else {\n      handleSelect(index);\n    }\n  }, [open, handleSelect]);\n  const {\n    context,\n    floatingStyles,\n    refs\n  } = useBaseFLoating({\n    open,\n    setOpen,\n    placement\n  });\n  const listNav = useListNavigation(context, {\n    listRef: elementsRef,\n    activeIndex,\n    selectedIndex,\n    onNavigate: setActiveIndex\n  });\n  const typeahead = useTypeahead(context, {\n    listRef: labelsRef,\n    activeIndex,\n    selectedIndex,\n    onMatch: handleTypeaheadMatch,\n    enabled: enableTypeAhead\n  });\n  const {\n    getReferenceProps,\n    getFloatingProps,\n    getItemProps\n  } = useFloatingInteractions({\n    context,\n    role: \"menu\",\n    trigger,\n    interactions: [listNav, typeahead]\n  });\n  const Icon = useMemo(() => {\n    const [p] = placement.split(\"-\");\n    return icons[p] ?? ChevronDownIcon;\n  }, [placement]);\n  return /* @__PURE__ */jsxs(DropdownContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme,\n      activeIndex,\n      dismissOnClick,\n      getItemProps,\n      handleSelect\n    },\n    children: [/* @__PURE__ */jsxs(Trigger, {\n      ...buttonProps,\n      refs,\n      inline,\n      theme,\n      \"data-testid\": dataTestId,\n      className: twMerge(theme.floating.target, className),\n      setButtonWidth,\n      getReferenceProps,\n      renderTrigger,\n      children: [label, arrowIcon && /* @__PURE__ */jsx(Icon, {\n        className: theme.arrowIcon\n      })]\n    }), open && /* @__PURE__ */jsx(FloatingFocusManager, {\n      context,\n      modal: false,\n      children: /* @__PURE__ */jsx(\"div\", {\n        ref: refs.setFloating,\n        style: {\n          ...floatingStyles,\n          minWidth: buttonWidth\n        },\n        \"data-testid\": \"flowbite-dropdown\",\n        \"aria-expanded\": open,\n        ...getFloatingProps({\n          className: twMerge(theme.floating.base, theme.floating.animation, \"duration-100\", !open && theme.floating.hidden, theme.floating.style.auto, className)\n        }),\n        children: /* @__PURE__ */jsx(FloatingList, {\n          elementsRef,\n          labelsRef,\n          children: /* @__PURE__ */jsx(\"ul\", {\n            className: theme.content,\n            tabIndex: -1,\n            children\n          })\n        })\n      })\n    })]\n  });\n}\nDropdown.displayName = \"Dropdown\";\nexport { Dropdown };","map":{"version":3,"names":["icons","top","ChevronUpIcon","right","ChevronRightIcon","bottom","ChevronDownIcon","left","ChevronLeftIcon","Trigger","refs","children","inline","theme","disabled","setButtonWidth","getReferenceProps","renderTrigger","buttonProps","ref","reference","a11yProps","useEffect","current","clientWidth","triggerElement","cloneElement","setReference","props","jsx","type","className","inlineWrapper","Button","Dropdown","open","setOpen","useState","activeIndex","setActiveIndex","selectedIndex","setSelectedIndex","buttonWidth","elementsRef","useRef","labelsRef","provider","useThemeProvider","useResolveTheme","dropdownTheme","dropdown","get","clearTheme","applyTheme","dismissOnClick","enableTypeAhead","restProps","resolveProps","placement","trigger","label","arrowIcon","dataTestId","handleSelect","useCallback","index","handleTypeaheadMatch","context","floatingStyles","useBaseFLoating","listNav","useListNavigation","listRef","onNavigate","typeahead","useTypeahead","onMatch","enabled","getFloatingProps","getItemProps","useFloatingInteractions","role","interactions","Icon","useMemo","p","split","jsxs","DropdownContext","Provider","value","twMerge","floating","target","FloatingFocusManager","modal","setFloating","style","minWidth","base","animation","hidden","auto","FloatingList","content","tabIndex"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Dropdown\\Dropdown.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ExtendedRefs } from \"@floating-ui/react\";\nimport { FloatingFocusManager, FloatingList, useListNavigation, useTypeahead } from \"@floating-ui/react\";\nimport type {\n  ComponentProps,\n  Dispatch,\n  FC,\n  HTMLProps,\n  MutableRefObject,\n  ReactElement,\n  ReactNode,\n  SetStateAction,\n} from \"react\";\nimport { cloneElement, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useBaseFLoating, useFloatingInteractions } from \"../../hooks/use-floating\";\nimport { ChevronDownIcon } from \"../../icons/chevron-down-icon\";\nimport { ChevronLeftIcon } from \"../../icons/chevron-left-icon\";\nimport { ChevronRightIcon } from \"../../icons/chevron-right-icon\";\nimport { ChevronUpIcon } from \"../../icons/chevron-up-icon\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { Button, type ButtonProps } from \"../Button\";\nimport type { FloatingProps, FloatingTheme } from \"../Floating\";\nimport { DropdownContext } from \"./DropdownContext\";\nimport type { DropdownDividerTheme } from \"./DropdownDivider\";\nimport type { DropdownHeaderTheme } from \"./DropdownHeader\";\nimport type { DropdownItemTheme } from \"./DropdownItem\";\nimport { dropdownTheme } from \"./theme\";\n\nexport interface DropdownFloatingTheme extends FloatingTheme, DropdownDividerTheme, DropdownHeaderTheme {\n  item: DropdownItemTheme;\n}\n\nexport interface DropdownTheme {\n  floating: DropdownFloatingTheme;\n  content: string;\n  inlineWrapper: string;\n  arrowIcon: string;\n}\n\nexport interface DropdownProps\n  extends Pick<FloatingProps, \"placement\" | \"trigger\">,\n    Omit<ButtonProps, keyof ThemingProps<DropdownTheme>>,\n    ThemingProps<DropdownTheme> {\n  arrowIcon?: boolean;\n  dismissOnClick?: boolean;\n  floatingArrow?: boolean;\n  inline?: boolean;\n  label?: ReactNode;\n  enableTypeAhead?: boolean;\n  renderTrigger?: (theme: DropdownTheme) => ReactElement;\n  \"data-testid\"?: string;\n}\n\nconst icons: Record<string, FC<ComponentProps<\"svg\">>> = {\n  top: ChevronUpIcon,\n  right: ChevronRightIcon,\n  bottom: ChevronDownIcon,\n  left: ChevronLeftIcon,\n};\n\nexport interface TriggerProps extends Omit<ButtonProps, keyof ThemingProps<DropdownTheme>> {\n  refs: ExtendedRefs<HTMLElement>;\n  inline?: boolean;\n  theme: DropdownTheme;\n  setButtonWidth?: Dispatch<SetStateAction<number | undefined>>;\n  getReferenceProps: (userProps?: HTMLProps<Element> | undefined) => Record<string, unknown>;\n  renderTrigger?: (theme: DropdownTheme) => ReactElement;\n}\n\nfunction Trigger({\n  refs,\n  children,\n  inline,\n  theme,\n  disabled,\n  setButtonWidth,\n  getReferenceProps,\n  renderTrigger,\n  ...buttonProps\n}: TriggerProps) {\n  const ref = refs.reference as MutableRefObject<HTMLElement>;\n  const a11yProps = getReferenceProps();\n\n  useEffect(() => {\n    if (ref.current) {\n      setButtonWidth?.(ref.current.clientWidth);\n    }\n  }, [ref, setButtonWidth]);\n\n  if (renderTrigger) {\n    const triggerElement = renderTrigger(theme);\n    return cloneElement(triggerElement, { ref: refs.setReference, disabled, ...a11yProps, ...triggerElement.props });\n  }\n\n  return inline ? (\n    <button type=\"button\" ref={refs.setReference} className={theme?.inlineWrapper} disabled={disabled} {...a11yProps}>\n      {children}\n    </button>\n  ) : (\n    <Button {...buttonProps} disabled={disabled} type=\"button\" ref={refs.setReference} {...a11yProps}>\n      {children}\n    </Button>\n  );\n}\n\nexport function Dropdown(props: DropdownProps) {\n  const [open, setOpen] = useState(false);\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\n  const [buttonWidth, setButtonWidth] = useState<number | undefined>(undefined);\n  const elementsRef = useRef<Array<HTMLElement | null>>([]);\n  const labelsRef = useRef<Array<string | null>>([]);\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [dropdownTheme, provider.theme?.dropdown, props.theme],\n    [get(provider.clearTheme, \"dropdown\"), props.clearTheme],\n    [get(provider.applyTheme, \"dropdown\"), props.applyTheme],\n  );\n\n  const {\n    children,\n    className,\n    dismissOnClick = true,\n    enableTypeAhead = true,\n    renderTrigger,\n    ...restProps\n  } = resolveProps(props, provider.props?.dropdown);\n\n  const {\n    placement = restProps.inline ? \"bottom-start\" : \"bottom\",\n    trigger = \"click\",\n    label,\n    inline,\n    arrowIcon = true,\n    ...buttonProps\n  } = restProps;\n  const dataTestId = restProps[\"data-testid\"] || \"flowbite-dropdown-target\";\n\n  const handleSelect = useCallback((index: number | null) => {\n    setSelectedIndex(index);\n    setOpen(false);\n  }, []);\n\n  const handleTypeaheadMatch = useCallback(\n    (index: number | null) => {\n      if (open) {\n        setActiveIndex(index);\n      } else {\n        handleSelect(index);\n      }\n    },\n    [open, handleSelect],\n  );\n\n  const { context, floatingStyles, refs } = useBaseFLoating<HTMLButtonElement>({\n    open,\n    setOpen,\n    placement,\n  });\n\n  const listNav = useListNavigation(context, {\n    listRef: elementsRef,\n    activeIndex,\n    selectedIndex,\n    onNavigate: setActiveIndex,\n  });\n\n  const typeahead = useTypeahead(context, {\n    listRef: labelsRef,\n    activeIndex,\n    selectedIndex,\n    onMatch: handleTypeaheadMatch,\n    enabled: enableTypeAhead,\n  });\n\n  const { getReferenceProps, getFloatingProps, getItemProps } = useFloatingInteractions({\n    context,\n    role: \"menu\",\n    trigger,\n    interactions: [listNav, typeahead],\n  });\n\n  const Icon = useMemo(() => {\n    const [p] = placement.split(\"-\");\n    return icons[p] ?? ChevronDownIcon;\n  }, [placement]);\n\n  return (\n    <DropdownContext.Provider\n      value={{\n        theme: props.theme,\n        clearTheme: props.clearTheme,\n        applyTheme: props.applyTheme,\n        activeIndex,\n        dismissOnClick,\n        getItemProps,\n        handleSelect,\n      }}\n    >\n      <Trigger\n        {...buttonProps}\n        refs={refs}\n        inline={inline}\n        theme={theme}\n        data-testid={dataTestId}\n        className={twMerge(theme.floating.target, className)}\n        setButtonWidth={setButtonWidth}\n        getReferenceProps={getReferenceProps}\n        renderTrigger={renderTrigger}\n      >\n        {label}\n        {arrowIcon && <Icon className={theme.arrowIcon} />}\n      </Trigger>\n      {open && (\n        <FloatingFocusManager context={context} modal={false}>\n          <div\n            ref={refs.setFloating}\n            style={{ ...floatingStyles, minWidth: buttonWidth }}\n            data-testid=\"flowbite-dropdown\"\n            aria-expanded={open}\n            {...getFloatingProps({\n              className: twMerge(\n                theme.floating.base,\n                theme.floating.animation,\n                \"duration-100\",\n                !open && theme.floating.hidden,\n                theme.floating.style.auto,\n                className,\n              ),\n            })}\n          >\n            <FloatingList elementsRef={elementsRef} labelsRef={labelsRef}>\n              <ul className={theme.content} tabIndex={-1}>\n                {children}\n              </ul>\n            </FloatingList>\n          </div>\n        </FloatingFocusManager>\n      )}\n    </DropdownContext.Provider>\n  );\n}\n\nDropdown.displayName = \"Dropdown\";\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}