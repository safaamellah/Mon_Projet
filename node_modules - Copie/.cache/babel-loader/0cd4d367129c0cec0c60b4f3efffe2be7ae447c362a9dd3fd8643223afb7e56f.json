{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { CheckIcon } from '../../icons/check-icon.js';\nimport { ClipboardListIcon } from '../../icons/clipboard-list-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { copyToClipboard } from './helpers.js';\nimport { clipboardTheme } from './theme.js';\nconst ClipboardWithIconText = forwardRef((props, ref) => {\n  const [isJustCopied, setIsJustCopied] = useState(false);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([clipboardTheme.withIconText, provider.theme?.clipboard?.withIconText, props.theme], [get(provider.clearTheme, \"clipboard.withIconText\"), props.clearTheme], [get(provider.applyTheme, \"clipboard.withIconText\"), props.applyTheme]);\n  const {\n    valueToCopy,\n    icon: Icon = ClipboardListIcon,\n    label = \"Copy\",\n    className,\n    ...rest\n  } = resolveProps(props, provider.props?.clipboardWithIconText);\n  return /* @__PURE__ */jsx(\"button\", {\n    className: twMerge(theme.base, className),\n    onClick: () => copyToClipboard(valueToCopy, setIsJustCopied),\n    ...rest,\n    ref,\n    children: isJustCopied ? /* @__PURE__ */jsxs(\"span\", {\n      className: theme.label.base,\n      children: [/* @__PURE__ */jsx(CheckIcon, {\n        \"aria-hidden\": true,\n        className: theme.icon.successIcon\n      }), /* @__PURE__ */jsx(\"span\", {\n        className: theme.label.successText,\n        children: \"Copied\"\n      })]\n    }) : /* @__PURE__ */jsxs(\"span\", {\n      className: theme.label.base,\n      children: [/* @__PURE__ */jsx(Icon, {\n        \"aria-hidden\": true,\n        className: theme.icon.defaultIcon\n      }), /* @__PURE__ */jsx(\"span\", {\n        className: theme.label.defaultText,\n        children: label\n      })]\n    })\n  });\n});\nClipboardWithIconText.displayName = \"Clipboard.WithIconText\";\nexport { ClipboardWithIconText };","map":{"version":3,"names":["ClipboardWithIconText","forwardRef","props","ref","isJustCopied","setIsJustCopied","useState","provider","useThemeProvider","theme","useResolveTheme","clipboardTheme","withIconText","clipboard","get","clearTheme","applyTheme","valueToCopy","icon","Icon","ClipboardListIcon","label","className","rest","resolveProps","clipboardWithIconText","jsx","twMerge","base","onClick","copyToClipboard","children","jsxs","CheckIcon","successIcon","successText","defaultIcon","defaultText"],"sources":["../../../src/components/Clipboard/ClipboardWithIconText.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, useState, type ComponentProps, type FC } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { CheckIcon } from \"../../icons/check-icon\";\nimport { ClipboardListIcon } from \"../../icons/clipboard-list-icon\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { copyToClipboard } from \"./helpers\";\nimport { clipboardTheme } from \"./theme\";\n\nexport interface ClipboardWithIconTextTheme {\n  base: string;\n  label: {\n    base: string;\n    defaultText: string;\n    successText: string;\n  };\n  icon: {\n    defaultIcon: string;\n    successIcon: string;\n  };\n}\n\nexport interface ClipboardWithIconTextProps extends ComponentProps<\"button\">, ThemingProps<ClipboardWithIconTextTheme> {\n  valueToCopy: string;\n  label?: string;\n  icon?: FC<ComponentProps<\"svg\">>;\n}\n\nexport const ClipboardWithIconText = forwardRef<HTMLButtonElement, ClipboardWithIconTextProps>((props, ref) => {\n  const [isJustCopied, setIsJustCopied] = useState(false);\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [clipboardTheme.withIconText, provider.theme?.clipboard?.withIconText, props.theme],\n    [get(provider.clearTheme, \"clipboard.withIconText\"), props.clearTheme],\n    [get(provider.applyTheme, \"clipboard.withIconText\"), props.applyTheme],\n  );\n\n  const {\n    valueToCopy,\n    icon: Icon = ClipboardListIcon,\n    label = \"Copy\",\n    className,\n    ...rest\n  } = resolveProps(props, provider.props?.clipboardWithIconText);\n\n  return (\n    <button\n      className={twMerge(theme.base, className)}\n      onClick={() => copyToClipboard(valueToCopy, setIsJustCopied)}\n      {...rest}\n      ref={ref}\n    >\n      {isJustCopied ? (\n        <span className={theme.label.base}>\n          <CheckIcon aria-hidden className={theme.icon.successIcon} />\n          <span className={theme.label.successText}>Copied</span>\n        </span>\n      ) : (\n        <span className={theme.label.base}>\n          <Icon aria-hidden className={theme.icon.defaultIcon} />\n          <span className={theme.label.defaultText}>{label}</span>\n        </span>\n      )}\n    </button>\n  );\n});\n\nClipboardWithIconText.displayName = \"Clipboard.WithIconText\";\n"],"mappings":";;;;;;;;;;;;;AAcA,MAAEA,qBAAqB,GAAAC,UAAgB,EAAGC,KAAA,EAAAC,GAAS,KAAM;EACvD,MAAM,CAAAC,YAAW,EAAAC,eAAkB,IAAAC,QAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAe,CAChB,CAACC,cAAa,CAAAC,YAAY,EAAAL,QAAA,CAAAE,KAAA,EAAAI,SAA2B,EAAAD,YAAgB,EAACV,KAAA,CAAAO,KAAA,GACtE,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,wBAAwB,CAAC,EAAEb,KAAK,CAACa,UAAU,GACtE,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,6BAAAd,KAAA,CAAAc,UAAA,CACD;EACF,MAAI;IACAC,WAAU;IACVC,IAAA,EAAKC,IAAG,GAAAC,iBAAM;IACdC,KAAA,SAAS;IACTC,SAAG;IACJ,GAAGC;EACJ,IAAAC,YAAA,CAAAtB,KAAA,EAAuBK,QAAG,CAAAL,KAAA,EAAAuB,qBAAA;EAC5B,OAAI,eAAQC,GAAA,CACR,UACJ;IACMJ,SAAS,EAAAK,OAAM,CAAAlB,KAAA,CAAAmB,IAAA,EAAgBN,SAAA;IAC/BO,OAAO,EAAAA,CAAA,KAAAC,eAAA,CAAAb,WAAA,EAAAZ,eAAA;IACP,GAAGkB,IAAA;IACHpB,GAAA;IACN4B,QAAA,EAAA3B,YAA4B,kBAAa4B,IAAA,OAAe,EAAI;MAAEV,SAAS,EAAEb,KAAK,CAACY,KAAK,CAAAO,IAAA;MAAAG,QAAc,GAClG,eAAwBL,GAAG,CAACO,SAAQ,EAAE;QAAA,aAAgB,EAAC,IAAK;QAACX,SAAA,EAAWb,KAAE,CAAAS,IAAQ,CAAEgB;MAAU,IACvF,eAAGR,GAAA,OAAwB;QAAAJ,SAAU,EAAAb,KAAS,CAAEY,KAAK,CAACc,WAAU;QAAEJ,QAAQ,EAAE;MAAA;IACnF,oBAA4BC,IAAI,CAAE,MAAE;MAAAV,SAAe,EAAIb,KAAE,CAAAY,KAAS,CAAAO,IAAE;MAAKG,QAAM,GAC/E,eAAwBL,GAAG,CAACP,IAAA,EAAM;QAAE,aAAa,MAAM;QAAAG,SAAM,EAAAb,KAAW,CAAES,IAAA,CAAAkB;MAAiB,IACpF,eAAEV,GAAA;QAAAJ,SAAA,EAAAb,KAAA,CAAAY,KAAA,CAAAgB,WAAA;QAAAN,QAAA,EAAAV;MAAA;IACT;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}