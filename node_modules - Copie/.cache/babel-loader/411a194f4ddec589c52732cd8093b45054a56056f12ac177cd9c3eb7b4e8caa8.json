{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { radioTheme } from './theme.js';\nconst Radio = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([radioTheme, provider.theme?.radio, props.theme], [get(provider.clearTheme, \"radio\"), props.clearTheme], [get(provider.applyTheme, \"radio\"), props.applyTheme]);\n  const {\n    color = \"default\",\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.radio);\n  return /* @__PURE__ */jsx(\"input\", {\n    ref,\n    type: \"radio\",\n    className: twMerge(theme.base, theme.color[color], className),\n    ...restProps\n  });\n});\nRadio.displayName = \"Radio\";\nexport { Radio };","map":{"version":3,"names":["Radio","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","radioTheme","radio","get","clearTheme","applyTheme","color","className","restProps","resolveProps","jsx","type","twMerge","base"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Radio\\Radio.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, FlowbiteColors, ThemingProps } from \"../../types\";\nimport { radioTheme } from \"./theme\";\n\nexport interface RadioTheme {\n  base: string;\n  color: FlowbiteColors;\n}\n\nexport interface RadioProps extends Omit<ComponentProps<\"input\">, \"ref\" | \"type\">, ThemingProps<RadioTheme> {\n  color?: DynamicStringEnumKeysOf<FlowbiteColors>;\n}\n\nexport const Radio = forwardRef<HTMLInputElement, RadioProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [radioTheme, provider.theme?.radio, props.theme],\n    [get(provider.clearTheme, \"radio\"), props.clearTheme],\n    [get(provider.applyTheme, \"radio\"), props.applyTheme],\n  );\n\n  const { color = \"default\", className, ...restProps } = resolveProps(props, provider.props?.radio);\n\n  return <input ref={ref} type=\"radio\" className={twMerge(theme.base, theme.color[color], className)} {...restProps} />;\n});\n\nRadio.displayName = \"Radio\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,KAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAgB,KAAE;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAUC,eAAgB,CAC3B,CAACC,UAAI,EAAQJ,QAAC,CAAAE,KAAY,EAAAG,KAAQ,EAAEP,KAAK,CAACI,KAAA,GAC1C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,OAAO,CAAC,EAAET,KAAK,CAACS,UAAU,GACrD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,YAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,KAAA,YAAuB;IAAIC,SAAS;IAAE,GAAGC;EAAQ,IAAAC,YAAkB,CAAAd,KAAE,EAAAE,QAAc,CAAAF,KAAM,EAAAO,KAAM;EAChG,sBAAAQ,GAAA;IAAAd,GAAA;IAAAe,IAAA;IAAAJ,SAAA,EAAAK,OAAA,CAAAb,KAAA,CAAAc,IAAA,EAAAd,KAAA,CAAAO,KAAA,CAAAA,KAAA,GAAAC,SAAA;IAAA,GAAAC;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}