{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useId, useEffect } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { DrawerContext } from './DrawerContext.js';\nimport { drawerTheme } from './theme.js';\nconst Drawer = forwardRef((props, ref) => {\n  const id = useId();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([drawerTheme, provider.theme?.drawer, props.theme], [get(provider.clearTheme, \"drawer\"), props.clearTheme], [get(provider.applyTheme, \"drawer\"), props.applyTheme]);\n  const {\n    backdrop = true,\n    children,\n    className,\n    edge = false,\n    position = \"left\",\n    onClose,\n    open: isOpen = false,\n    ...restProps\n  } = resolveProps(props, provider.props?.drawer);\n  useEffect(() => {\n    const handleEscapeKey = event => {\n      if (event.key === \"Escape\" && isOpen && onClose) {\n        onClose();\n      }\n    };\n    document.addEventListener(\"keydown\", handleEscapeKey);\n    return () => document.removeEventListener(\"keydown\", handleEscapeKey);\n  }, [onClose, isOpen]);\n  return /* @__PURE__ */jsxs(DrawerContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme,\n      onClose,\n      isOpen,\n      id\n    },\n    children: [/* @__PURE__ */jsx(\"div\", {\n      ref,\n      \"aria-modal\": true,\n      \"aria-describedby\": `drawer-dialog-${id}`,\n      role: \"dialog\",\n      tabIndex: -1,\n      \"data-testid\": \"flowbite-drawer\",\n      className: twMerge(theme.root.base, theme.root.position[position][isOpen ? \"on\" : \"off\"], edge && !isOpen && theme.root.edge, className),\n      ...restProps,\n      children\n    }), isOpen && backdrop && /* @__PURE__ */jsx(\"div\", {\n      onClick: () => onClose(),\n      className: theme.root.backdrop\n    })]\n  });\n});\nDrawer.displayName = \"Drawer\";\nexport { Drawer };","map":{"version":3,"names":["Drawer","forwardRef","props","ref","id","useId","provider","useThemeProvider","theme","useResolveTheme","drawerTheme","drawer","get","clearTheme","applyTheme","backdrop","children","className","edge","position","onClose","open","isOpen","restProps","resolveProps","useEffect","handleEscapeKey","event","key","document","addEventListener","removeEventListener","jsxs","DrawerContext","Provider","value","jsx","role","tabIndex","twMerge","root","base","onClick"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Drawer\\Drawer.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef, useEffect, useId } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport { DrawerContext } from \"./DrawerContext\";\nimport type { DrawerHeaderTheme } from \"./DrawerHeader\";\nimport type { DrawerItemsTheme } from \"./DrawerItems\";\nimport { drawerTheme } from \"./theme\";\n\nexport interface DrawerTheme {\n  root: DrawerRootTheme;\n  header: DrawerHeaderTheme;\n  items: DrawerItemsTheme;\n}\n\nexport interface DrawerRootTheme {\n  base: string;\n  backdrop: string;\n  edge: string;\n  position: {\n    top: FlowbiteBoolean;\n    right: FlowbiteBoolean;\n    bottom: FlowbiteBoolean;\n    left: FlowbiteBoolean;\n  };\n}\n\nexport interface DrawerProps extends ComponentProps<\"div\">, ThemingProps<DrawerTheme> {\n  backdrop?: boolean;\n  edge?: boolean;\n  onClose: () => void;\n  open?: boolean;\n  position?: \"top\" | \"right\" | \"bottom\" | \"left\";\n}\n\nexport const Drawer = forwardRef<HTMLDivElement, DrawerProps>((props, ref) => {\n  const id = useId();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [drawerTheme, provider.theme?.drawer, props.theme],\n    [get(provider.clearTheme, \"drawer\"), props.clearTheme],\n    [get(provider.applyTheme, \"drawer\"), props.applyTheme],\n  );\n\n  const {\n    backdrop = true,\n    children,\n    className,\n    edge = false,\n    position = \"left\",\n    onClose,\n    open: isOpen = false,\n    ...restProps\n  } = resolveProps(props, provider.props?.drawer);\n\n  useEffect(() => {\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\" && isOpen && onClose) {\n        onClose();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleEscapeKey);\n\n    return () => document.removeEventListener(\"keydown\", handleEscapeKey);\n  }, [onClose, isOpen]);\n\n  return (\n    <DrawerContext.Provider\n      value={{ theme: props.theme, clearTheme: props.clearTheme, applyTheme: props.applyTheme, onClose, isOpen, id }}\n    >\n      <div\n        ref={ref}\n        aria-modal\n        aria-describedby={`drawer-dialog-${id}`}\n        role=\"dialog\"\n        tabIndex={-1}\n        data-testid=\"flowbite-drawer\"\n        className={twMerge(\n          theme.root.base,\n          theme.root.position[position][isOpen ? \"on\" : \"off\"],\n          edge && !isOpen && theme.root.edge,\n          className,\n        )}\n        {...restProps}\n      >\n        {children}\n      </div>\n      {isOpen && backdrop && <div onClick={() => onClose()} className={theme.root.backdrop} />}\n    </DrawerContext.Provider>\n  );\n});\n\nDrawer.displayName = \"Drawer\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,MAAQ,GAAGC,UAAO,EAAAC,KAAA,EAAAC,GAAA;EAClB,MAAMC,EAAA,GAAAC,KAAQ,CAAG;EACjB,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAWC,eAAW,CACvB,CAACC,WAAI,EAASJ,QAAA,CAAAE,KAAY,EAAAG,MAAS,EAAET,KAAM,CAAAM,KAAA,GAC3C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,QAAQ,CAAC,EAAEX,KAAK,CAACW,UAAU,GACtD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,aAAAZ,KAAA,CAAAY,UAAA,CACD;EACF,MAAI;IACAC,QAAQ;IACRC,QAAA;IACAC,SAAO;IACPC,IAAA,QAAW;IACXC,QAAO;IACPC,OAAM;IACNC,IAAG,EAAAC,MAAA;IACJ,GAAGC;EACJ,IAAAC,YAAgB,CAAAtB,KAAA,EAAAI,QAAA,CAAAJ,KAAA,EAAAS,MAAA;EAClBc,SAAU;IACV,MAAUC,eAAc,GAAAC,KAAQ,IAAI;MACpC,IAAQA,KAAO,CAAAC,GAAE,iBAAAN,MAAA,IAAAF,OAAA;QACjBA,OAAA;MACK;IACD;IACAS,QAAO,CAAAC,gBAAe,YAAAJ,eAA6B,CAAE;IACtD,OAAG,MAASG,QAAQ,CAAAE,mBAAA,YAAAL,eAAA;EACrB,IAAAN,OAAA,EAAAE,MAAA;EACF,OAAI,eAAcU,IAAQ,CACtBC,aAAA,CAAAC,QAAA,EACJ;IACMC,KAAA;MAAQ3B,KAAE,EAAAN,KAAA,CAAAM,KAAA;MAAAK,UAAA,EAAAX,KAAA,CAAAW,UAAA;MAAAC,UAAA,EAAAZ,KAAA,CAAAY,UAAA;MAAAM,OAAA;MAAAE,MAAA;MAAAlB;IAAA;IAChBY,QAAA,GACA,eAAeoB,GAAA,CACL,OACV;MACYjC,GAAA;MACA,kBAAkB;MAClB,kBAAc,mBAAAC,EAAA;MACdiC,IAAA,UAAY;MACZC,QAAA;MACA,aAAW,mBAAO;MAC9BrB,SAAoB,EAAAsB,OAAS,CACf/B,KAAK,CAACgC,IAAI,CAACC,IAAA,EACXjC,KAAI,CAAAgC,IAAK,CAAArB,QAAU,CAAAA,QAAM,CAAI,CAACG,MAAI,kBAClCJ,IAAA,KAAAI,MAAA,IAAAd,KAAA,CAAAgC,IAAA,CAAAtB,IAAA,EACDD,SACD;MACA,GAAAM,SAAA;MACZP;IACS,CACD,GACRM,MAAA,IAAAP,QAAA,mBAAAqB,GAAA;MAAAM,OAAA,EAAAA,CAAA,KAAAtB,OAAA;MAAAH,SAAA,EAAAT,KAAA,CAAAgC,IAAA,CAAAzB;IAAA;EAEG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}