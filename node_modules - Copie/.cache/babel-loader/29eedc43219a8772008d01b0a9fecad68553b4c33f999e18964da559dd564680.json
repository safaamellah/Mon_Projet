{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { TableBodyContext } from './TableBodyContext.js';\nimport { useTableContext } from './TableContext.js';\nimport { tableTheme } from './theme.js';\nconst TableBody = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme\n  } = useTableContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([tableTheme.body, provider.theme?.table?.body, rootTheme?.body, props.theme], [get(provider.clearTheme, \"table.body\"), get(rootClearTheme, \"body\"), props.clearTheme], [get(provider.applyTheme, \"table.body\"), get(rootApplyTheme, \"body\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.tableBody);\n  return /* @__PURE__ */jsx(TableBodyContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme\n    },\n    children: /* @__PURE__ */jsx(\"tbody\", {\n      ref,\n      className: twMerge(theme.base, className),\n      ...restProps\n    })\n  });\n});\nTableBody.displayName = \"TableBody\";\nexport { TableBody };","map":{"version":3,"names":["TableBody","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","useTableContext","provider","useThemeProvider","useResolveTheme","tableTheme","body","table","get","className","restProps","resolveProps","tableBody","jsx","TableBodyContext","Provider","value","children","twMerge","base"],"sources":["C:\\Users\\PC\\mon-projet-react\\node_modules\\flowbite-react\\src\\components\\Table\\TableBody.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentPropsWithRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { TableBodyContext } from \"./TableBodyContext\";\nimport type { TableCellTheme } from \"./TableCell\";\nimport { useTableContext } from \"./TableContext\";\nimport { tableTheme } from \"./theme\";\n\nexport interface TableBodyTheme {\n  base: string;\n  cell: TableCellTheme;\n}\n\nexport interface TableBodyProps extends ComponentPropsWithRef<\"tbody\">, ThemingProps<TableBodyTheme> {}\n\nexport const TableBody = forwardRef<HTMLTableSectionElement, TableBodyProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme } = useTableContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [tableTheme.body, provider.theme?.table?.body, rootTheme?.body, props.theme],\n    [get(provider.clearTheme, \"table.body\"), get(rootClearTheme, \"body\"), props.clearTheme],\n    [get(provider.applyTheme, \"table.body\"), get(rootApplyTheme, \"body\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.tableBody);\n\n  return (\n    <TableBodyContext.Provider\n      value={{ theme: props.theme, clearTheme: props.clearTheme, applyTheme: props.applyTheme }}\n    >\n      <tbody ref={ref} className={twMerge(theme.base, className)} {...restProps} />\n    </TableBodyContext.Provider>\n  );\n});\n\nTableBody.displayName = \"TableBody\";\n"],"mappings":";;;;;;;;;;;;AAaA,MAAEA,SAAa,GAAEC,UAAW,EAAAC,KAAA,EAAAC,GAAY;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC;EAAA,IAAAC,eAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKR,KAAA,GAAWS,eAAe,CAC3B,CAACC,UAAI,CAAAC,IAAS,EAAAJ,QAAY,CAAAP,KAAA,EAAAY,KAAa,EAAED,IAAI,EAAAV,SAAA,EAAAU,IAAgB,EAAAb,KAAO,CAAEE,KAAK,CAAC,EAC5E,CAACa,GAAG,CAACN,QAAQ,CAACL,UAAU,EAAE,YAAY,CAAC,EAAEW,GAAG,CAACV,cAAc,EAAE,MAAM,CAAC,EAAEL,KAAK,CAACI,UAAU,GACvF,CAAAW,GAAA,CAAAN,QAAA,CAAAH,UAAA,iBAAAS,GAAA,CAAAR,cAAA,WAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAU,SAAA;IAAA,GAAAC;EAA0B,IAAAC,YAAA,CAAAlB,KAAA,EAAAS,QAAA,CAAAT,KAAA,EAAAmB,SAAA;EAC5B,OAAI,eAAiBC,GAAA,CACjBC,gBAAA,CAAAC,QAAA,EACJ;IACMC,KAAA;MAAQrB,KAAA,EAAAF,KAAA,CAAAE,KAAkB;MAAGE,UAAU,EAAEJ,KAAK,CAAAI,UAAW;MAAAE,UAAQ,EAAMN,KAAI,CAAEM;IAAU,CAAE;IAC/FkB,QAAA,iBAAAJ,GAAA;MAAAnB,GAAA;MAAAe,SAAA,EAAAS,OAAA,CAAAvB,KAAA,CAAAwB,IAAA,EAAAV,SAAA;MAAA,GAAAC;IAAA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}